	title   MSX-DOS 2 CHKDSK Program - Search and FAT Routines
	.z80
	INCLUDE CHMACROS.INC
	INCLUDE CHCONST.INC
;******************************************************************************
;
DRE_START::
;
;    This routine is called to start the search of a directory.  The directory
; is  specified by its start cluster number in the variable "DIR_START", which
; will be -ve if it is the root directory.  Once it  has  done  some  fiddling
; around  with  the cluster number, this routine jumps into DRE_NEXT to set up
; the directory search variables.
;
; Returns:    Z-flag  set  =>  HL -> directory entry in sector buffer
;             Z-flag clear =>  end of directory reached.
; Corrupts:   AF,BC,DE,HL
;
;
		ld      de,(DIR_START##)        ;Get start cluster number
		bit     7,d                     ; and jump into "DRE_NEXT"
		jr      z,SUB_DRE_START         ; if it is a sub-directory.
;
;
						;ROOT DIRECTORY
;
		LD      HL,(RT_ENT##)           ;Number of root directory ents.
		LD      B,4                     ;/16 -> number of full sectors.
loop_sec_sft:   SRL     H
		RR      L
		DJNZ    loop_sec_sft
		LD      A,L                     ;"RT_SEC".
		PUSH    AF
		LD      A,(RT_ENT##)            ;Find remainder when /16, to
		AND     00001111b               ; give "DIR_ODD".
;
		ld      bc,(RT_START##)         ;BC := first sector number
		ld      hl,0FFFFh               ;Set next clusters -ve 
						; to indicate root directory.
		jr      ROOT_DRE_START
;
;
;
;------------------------------------------------------------------------------
;
DRE_SAME::      ld      hl,DIR_E_LEFT##         ;Bump entries left count to
		inc     (hl)                    ; ensure we get same entry.
;
DRE_NEXT::
;
;    This routine returns a pointer to the next entry in the  directory  being
; searched.   If  the  physical  end  of  the  directory is reached, or if the
; cluster chain is invalid then it returns NZ and the search must  stop.   The
; root directory is treated as a single cluster of rather an odd size.
;
; Returns:    Z-flag  set  =>  HL -> directory entry in sector buffer
;             Z-flag clear =>  end of directory reached.
; Corrupts:   AF,BC,DE,HL
;
;
		ld      de,(DIR_SECTOR##)       ;DE := current sector number
		ld      a,(DIR_E_LEFT##)        ;Decrement number of entries
		dec     a                       ; left and if non-zero then
		jr      nz,same_sector          ; jump to use same sector.
;
		inc     de                      ;Bump sector number 
		ld      a,(DIR_S_LEFT##)        ;Decrement number of sectors
		dec     a                       ; left in this cluster and
		jr      nz,same_cluster         ; jump if non-zero.
;
		ld      a,(DIR_ODD##)           ;If there is an odd sector at
		or      a                       ; the end of this cluster then
		jr      nz,odd_sector           ; jump to process it.
;
		ld      de,(DIR_NEXT_CLU##)     ;Get next cluster number and
		bit     7,d                     ; if it is -ve, return NZ to
		ret     nz                      ; indicate end of directory.
;
SUB_DRE_START:  call    NEXT_CLU                ;Find next cluster number
		call    CLU_TO_SEC              ;Translate current cluster
						; to sector number in BC.
		ld      a,(SEC_CLU##)           ;Put number of sectors in this
		PUSH    AF                      ; cluster on the stack.
		xor     a                       ;Flag no odd sector
;
ROOT_DRE_START: ld      (DIR_ODD##),a           ;Record odd sector count
		ld      (DIR_NEXT_CLU##),hl     ;Record next cluster number
		ld      d,b                     ;DE := new sector number
		ld      e,c
		pop     af                      ;A := number of sectors in
						;     this cluster.
;
;
;
same_cluster:   ld      b,512/32                ;Get entry count for whole
		or      a                       ; sector into B and skip if any
		jr      nz,not_odd_sector       ; whole sectors are left.
;
odd_sector:     ld      a,(DIR_ODD##)           ;For an odd sector, get number
		ld      b,a                     ; of entries into B and zero
		xor     a                       ; it for next time round.
		ld      (DIR_ODD##),a
		inc     a                       ;Sectors left = 1.
;
not_odd_sector: ld      (DIR_S_LEFT##),a        ;Record number of sectors left
		ld      a,b                     ;Record total number of entries
		ld      (DIR_ENT##),a           ; in this sector.
		ld      (DIR_SECTOR##),de       ;Record new sector number.
;
;
;
same_sector:    ld      (DIR_E_LEFT##),a        ;Record number of entries left
		push    af                      ; in sector & save it for below
		call    READ_SECT##             ;Read the sector into buffer
;
		pop     bc                      ;Calculate the entry number
		ld      a,(DIR_ENT##)           ; within this sector from
		sub     b                       ; total number of entries and
		jr      start_ent_loop          ; the entries left.
;
dir_ent_loop:   ld      de,32
		add     hl,de                   ;Loop to point HL at required
		dec     a                       ; entry within this sector
start_ent_loop: jr      nz,dir_ent_loop         ; in its buffer.
;
;
;
		xor     a                       ;Return with Z-set to indicate
		ret                             ; sucess.
;
;
;------------------------------------------------------------------------------
;
CLU_TO_SEC:
;
;    This  routine simply translates a cluster number passed in register DE to
; a sector number which is returned in register BC.  No check on the  validity
; of  the  cluster  number  is done so this should be done before calling this
; routine.
;
; Entry:     DE = Cluster number
; Returns:   BC = Sector number 
; Corrupts:  AF,BC
; 
;
;
		push    de                      ;Cluster number to HL and
		ex      (sp),hl                 ; save old HL on stack.
		dec     hl                      ;Decrement cluster number 
		dec     hl                      ; by two.
;
		ld      a,(CLU_SHIFT##)
		INC     A                       ;Shift cluster number left
		code    mvi c                   ; by the "cluster shift"
clu_shift_loop: add     hl,hl                   ; value from unit descriptor.
		dec     a
		jr      nz,clu_shift_loop
;
		ld      bc,(DATA_START##)       ;Add on the first data sector
		add     hl,bc                   ; to get the final sector
		ex      (sp),hl                 ; number and get it into BC
		pop     bc                      ; also restoring HL.
		ret     
;
;
;------------------------------------------------------------------------------
;
NEXT_CLU::
;
;    This routine returns the next cluster number for a specified cluster.
;
; Entry:     DE = Cluster number
; Returns:   Z-flag set =>  A = top four bit flags from entry (b0...b3 clear)
;                          HL = bottom 12 bits of entry.  If entry is FF8h
;                               or higher then HL=FFFFh (end of chain).
;            Z-flag clear => invalid cluster number (HL and A are undefined) 
;                            Note clusters 0 and 1 are invalid  
; Corrupts:  AF,HL
;
;
		call    F_FAT                   ;Find FAT entry and return
		ret     nz                      ; NZ if invalid number.
;
		push    de
		ld      e,(hl)                  ;Get value of this entry
		inc     hl                      
		ld      a,(hl)
		push    af                      ;Save top bit flags for return
		and     0Fh             
		ld      d,a                     ;DE := 12 bit entry 0...FFFh
		ld      hl,0FF8h-1
		sbc     hl,de
		ex      de,hl                   ;If entry is FF8h...FFFh then 
		jr      nc,not_end_chain        ; set HL to 0FFFFh to indicate
		ld      hl,0FFFFh               ; end of chain.
not_end_chain:  pop     af                      ;Get top bit flags back and
		and     0F0h                    ; clear bottom four bits.
		pop     de                      ;Get original entry number back
		cp      a
		ret                             ;Return with Z-flag set
;
;
;------------------------------------------------------------------------------
;
F_FAT::
;
;    This routine just returns a pointer to the required entry in the FAT,  or
; a  non-zero  flag  to  indicate  an  invalid  entry number. Zero and one are
; counted as invalid entry numbers byu this routine.
;
; Entry:     DE = Required FAT entry number
; Returns:    A = 00h (and Z)  if DE is valid entry number
;             A = FFh (and NZ) if DE an invalid entry number
;            HL = Address of entry DE in FAT.  Undefined if A=FFh.
; Corrupts:  AF,HL
;
;
		ld      a,e                     ;Check for cluster number
		res     0,a                     ; zero or one and return 
		or      d                       ; NZ if it is one of these. 
		jr      nz,not_clu_0_1
		dec     a
		ret
;
not_clu_0_1:    scf
		ld      hl,(TOT_CLU##)          ;Check that the cluster 
		sbc     hl,de                   ; number is within the range
		jr      nc,find_fat_ok          ; for this disk.
		xor     a
		dec     a                       ;Return A=FFh and NZ if
		ret                             ; entry is out of range.
;
find_fat_ok:    ld      hl,(FAT##)              ;If entry is in range then
		add     hl,de                   ; get the address of the
		add     hl,de                   ; entry into HL and return 
		xor     a                       ; with A=0 and Z-set.
		ret
;
;
;
;******************************************************************************
;
DRE_SV::
;
;    This routine saves the current directory variables on the stack above the
; program  and  stores  the cluster number from the current entry in DIR_START
; ready to search this sub-directory.  If  there  is  insufficient  memory  to
; store  the  variables  then  it first tries to zap the file list and if this
; still does not give enough memory then it aborts the program with an error. 
;
; Entry:     IX -> directory entry for sub-directory
; Returns:   None
; Corrupts:  AF,BC,DE,HL
;
;
		ld      hl,(RAM_BOT##)          ;Add the size of variables to
		ld      de,SV_SIZE##            ; free memory pointer to get
		add     hl,de                   ; new free RAM pointer & give
		jr      c,memory_full           ; up if overflow.
;
		ex      de,hl                   ;See if enough spare memory
		ld      hl,(RAM_TOP##)          ; below file list and jump
		sbc     hl,de                   ; if there is.
		jr      nc,memory_ok
;
		ld      hl,(TPA_TOP##)          ;Try setting the top of free
		or      a                       ; RAM back to the start of
		sbc     hl,de                   ; the file list and give
		jr      c,memory_full           ; up if still not enough.
		call    FLST_STOP               ;Stop using the file list
;
memory_ok:      ld      hl,(DIR_START##)        ;Remember start cluster for
		push    hl                      ; the sub-directory's parent
		ld      de,(RAM_BOT##)
		ld      hl,SV_START##           ;Copy the directory search
		ld      bc,SV_SIZE##            ; variables into the new
		ldir                            ; save area.
		ld      (RAM_BOT##),de
		pop     hl                      ;Record start cluster of 
		ld      (DIR_PARENT##),hl       ; sub-directories parent
;
		ld      l,(ix+DR_CLU)
		ld      h,(ix+DR_CLU+1)         ;Setup DIR_START ready to
		ld      (DIR_START##),hl        ; search this sub-directory.
;
		ld      hl,(FILE_PTR##)         ;Store the address of this
		ld      (DIR_ADDR##),hl         ; record for any files in
		ret                             ; this directory.
;
;
memory_full:    ld      a,.NORAM##              ;Exit the program if ran
		jp      EXIT##                  ; out of memory.
;
;
;------------------------------------------------------------------------------
;
DRE_LD::
;
;    This routine restores the directory variables to continue a search when a
; sub-directory search has been completed.  If the value of "DIR_START" is -ve
; when this routine is entered then it immediately returns NZ since it  cannot
; recurse back up from the root.   
;
; Entry:    None
; Returns:  Z-flag set => previous search can continue
;                  clear => finished root, no more to do
; Corrupts: AF,BC,DE,HL
;
;
		ld      a,(DIR_START##+1)       ;Return NZ if already at
		bit     7,a                     ; root directory.
		ret     nz
;
		ld      hl,(RAM_BOT##)          ;Adjust memory pointer for 
		ld      bc,-SV_SIZE##           ; the previous set of
		add     hl,bc                   ; variables.
		ld      (RAM_BOT##),hl
		ld      de,DIR_START##          ;Load previous variables
		ld      bc,SV_SIZE##            ; back into working store.
		ldir
;
		xor     a                       ;Return with Z-flag set to
		ret                             ; indicate not root directory.
;
;
;------------------------------------------------------------------------------
;
FLST_STOP:
;
;    This  routine  is  called by "DRE_SV" and "FLST_NEW" when they run out of
; memory.  It resets the top of free memory to the top of the TPA and  sets  a
; flag  to  indicate that the file list is no longer being kept.  The variable
; "FILE_PTR" is set to point to a dummy record so the flag setting  operations
; etc.  will  not  be harmful.  A pointer to this dummy record is returned for
; "FLST_NEXT".
;
; Entry:      None
; Returns:    HL -> dummy file list record
; Corrupts:   AF,HL
;
;
		ld      hl,ER_FLAG##            ;Set a flag to indicate
		bit     2,(hl)                  ; that file list is dead.
		set     2,(hl)                  ;If flag was clear before
		ld      a,__NOFL_MSG##          ; then warn user about the
		call    z,WR_MSG##              ; memory shortage.
;
		ld      hl,(TPA_TOP##)          ;Set top of free RAM pointer
		ld      (RAM_TOP##),hl          ; back to top of TPA.
		ld      hl,DUMMY_RECORD         ;Point the file list pointer
		ld      (FILE_PTR##),hl         ; at the dummy record below.
		ret             
;
;
DUMMY_RECORD:   ds      16,0                    ;Dummy file list record.
;
;
;------------------------------------------------------------------------------
;
FLST_NEW::
;
;    This routine gets a new file list record  and  sets  up  the  attributes,
; cluster,  parent  address  and  name  in it.  Checks for running out of free
; memory are done and if this occurs then "FLST_STOP" is  called  to  give  up
; using  the  file  list.  If this occurs, or if the file list is already dead
; then a dummy record is used.  This enables a single name to be stored.
;
; Entry:     IX -> directory entry for new item
; Returns:   HL -> flags byte of new item
; Corrupts:  AF,HL
;
;
		push    de                      
		push    bc
;
flst_new_2:     ld      hl,ER_FLAGS##           ;If file list is not being
		bit     2,(hl)                  ; used then just use the
		ld      hl,(FILE_PTR##)         ; dummy record.
		jr      nz,use_dummy_rec
;
		ld      bc,-16                  ;See whether there is space
		add     hl,bc                   ; for another file list record 
		push    hl                      ; in the free memory area.
		ld      bc,(RAM_BOT##)
		or      a                       
		sbc     hl,bc                   ;If not then jump to stop
		pop     hl                      ; using the file list and
		jr      c,flist_full            ; use dummy pointer.
		ld      (RAM_TOP##),hl          ;Record new top of RAM and 
		ld      (FILE_PTR##),hl         ; pointer to this record.
;
use_dummy_rec:  ld      a,(ix+DR_ATTR)          ;Store attributes byte in
		ld      (hl),a                  ; the file record.
		inc     hl
		ld      a,(ix+DR_CLU)
		ld      (hl),a                  ;Store this entry's cluster
		inc     hl                      ; number in the file record.
		ld      a,(ix+DR_CLU+1)
		ld      (hl),a
		inc     hl
;
		ld      bc,(DIR_ADDR##)
		ld      (hl),c                  ;Store address of this file's
		inc     hl                      ; parent in the file record
		ld      (hl),b
		inc     hl
;
		push    ix
		ex      (sp),hl                 ;Copy filename from directory
		pop     de                      ; entry into the record.
		ld      bc,11
		ldir
;
		ld      hl,(FILE_PTR##)         ;Return with HL pointing to
		pop     bc                      ; the new record.
		pop     de
		ret
;
;
flist_full:     call    FLST_STOP               ;Memory full so kill file list
		jr      flst_new_2              ; and loop to use dummy record.
;
;
;******************************************************************************
;
CMP_FNAME::
;
;    This routine tests whether a filename pointed to by DE matches a possibly
; ambiguous  filename pointed to by HL.  Both filenames are in FCB format (8+3
; characters padded with spaces).  The  0E5h  fiddle  is  done  on  the  first
; character of the (DE) filename, so that if this is 05h it will be translated
; to 0E5h.  Each character of the filename pointed to  by  DE  will  be  upper
; cased before comparison. The necessary  checks  for  16-bit  characters  are
; included in this routine.
;
; Entry:      DE -> Filename to be tested (non-ambiguous)
;             HL -> Required filename (may be ambigous)
; Returns:  Z-flag set (Z) => filename matched
;                      (NZ) => filename didn't match or was invalid
; Corrupts:  AF,BC,DE,HL
;
;
		ld      a,(de)
		cp      05h                     ;If first character of file
		jr      nz,no_e5_fiddle         ; name is 05h then turn it
		ld      a,0E5h                  ; into 0E5h (the usual fiddle).
no_e5_fiddle:           
		ld      bc,11*256+0             ;B:=char count, C:=char flags
cmp_fname_loop: push    af
		ld      a,(hl)                  ;Check character for 16-bit
		call    C_CH1                   ; flags. 
		pop     af
		cp      (hl)                    ;Skip if two characters are
		jr      z,char_match            ; the same.
		bit     CF_2ND,c
		ret     nz                      ;If not then match them if
		ld      a,(hl)                  ; the one at (hl) is "?", but
		cp      "?"                     ; not if it is 2nd byte of a
		ret     nz                      ; 16-bit character.
;
char_match:     inc     hl
		inc     de                      ;Point to next character pair
		ld      a,(de)                  ; and loop 'til done whole
		djnz    cmp_fname_loop          ; filename.
;
		xor     a                       ;Return Z-set to indicate match
		ret
;
;
;------------------------------------------------------------------------------
;
C_CH1::
;
;        This routine does a call to MSX_DOS's check character routine.   This
; is  in  order that 16 bit characters may be found and upper casing done, and
; also to test for filename terminator characters. 
;
; Entry:        A: The character.
;               C: The flags.
;
		PUSH    HL
		PUSH    DE
		PUSH    BC
		LD      E,A                     ;Character into E.
		LD      D,C                     ;Character flags.
		LD      C,_CHKCHR##
		CALL    MSX_DOS
		LD      A,E                     ;The revised character.
		POP     BC
		LD      C,D                     ;Character flags.
		POP     DE
		POP     HL
		RET
;
;------------------------------------------------------------------------------
;
	finish  <DIR>
	end
;
