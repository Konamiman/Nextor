	.z80
	title	MSX-DOS 2 ROM   Copyright (1986)  IS Systems Ltd.
	subttl	Dummy disk driver module
;-----------------------------------------------------------------------------
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
;
;-----------------------------------------------------------------------------
;
$$DRIVE::
;
;       External Routines.
;
	extrn	PROMPT,SETINT,PRVINT,GETSLOT,GETWRK,DIV16,ENASLT,XFER
;
;       External Variables.
;
	extrn	$SECBUF,RAMAD0,RAMAD1,RAMAD2,RAMAD3,RAWFLG
;
;       Public Values.
;
	public	MYSIZE,SECLEN,DEFDPB
;
;       Public Routines.
;
	public	INIHRD,DRIVES,INIENV
	public	DSKIO,DSKCHG,GETDPB,CHOICE,DSKFMT,MTOFF
	public	OEMSTATEMENT
;
MYSIZE		equ	0
;
SECLEN		equ	512
;
DEFDPB:
;
;
;-----------------------------------------------------------------------------
;
INIHRD::	ret
;
DRIVES::	ld	l,0
		ret
;
;
;-----------------------------------------------------------------------------
;
;   Following routines will never be called, but is provided for fail safe.
;
DSKIO::
DSKCHG::
GETDPB::	ld	a,12
		scf
INIENV::
MTOFF::		ret
;
CHOICE::	ld	hl,null_message
		ret
null_message:	defb	0
;
DSKFMT::	ld	a,16
		scf
		ret
;
;
;------------------------------------------------------------------------------
;
;   BASIC extended statement.
;
OEMSTATEMENT::
if 0
		scf
		ret
else
;
; MSX-DOS Ver.2 Cartridge Memory Checker
;
;					by Kei Suzuki	July  18th, 1988
; Update for auto RAM size version	by Kei Suzuki	March 14th, 1989
AUTOSIZE	equ	1
;
; Usage: "_DOS2MEMCHK" from BASIC environment (Extended Statement)
;
; Cartridge configuration
;
; 256K RAM version.
; slot	#x-0			#x-1	#x-2
;	+----+			+----+	+----+
; page3	| .. |			| M  |	| .. |
;	+----+			+ A -+	+----+
; page2	| .. |			| P  |	| .. |
;	+----+----+----+----+	+ P -+	+----+
; page1	|BNK0|BNK1|BNK2|BNK3|	| E  |	|KNJd|
;	+----+----+----+----+	+ R -+	+----+
; page0	| .. |			|256K|	| .. |
;	+----+			+----+	+----+
;
; 128K RAM version.
; slot	#x-0			#x-1	#x-2
;	+----+			+----+	+----+
; page3	| .. |			| M  |	| .. |
;	+----+			+ A -+	+----+
; page2	| .. |			| P  |	| .. |
;	+----+----+----+----+	+ P -+	+----+
; page1	|BNK0|BNK1|BNK2|BNK3|	| E  |	|KNJd|
;	+----+----+----+----+	+ R -+	+----+
; page0	| .. |			|128K|	| .. |
;	+----+			+----+	+----+
;
; Mega-ROM version.
;	+----+
; page3	|    |
;	+----+
; page2	|    |
;	+----+----+----+----+
; page1	|BNK0|BNK1|BNK2|KNJd|
;	+----+----+----+----+
; page0	|    |
;	+----+
;
; Addresses of bank select register are different.  However,
; Bank is selected by calling external routine called CHGBNK
; with bank number in A register (0..3).  We are in bank #0.
;
; Diagnose following items:
;	CHECKSUM  BNK0, BNK1, BNK2, BNK3, KNJd
;	MAPPER RAM read after write
;
CHGET		equ	009Fh
CHPUT		equ	00A2h
;
PROCNM		equ	0FD89h		; Name of CALL statement
;
DOS2MEMCHK:
		push	hl		; save text pointer
		ld	de,PROCNM	; extended statement name
		ld	hl,statement	; my statement name
checkname_1:	ld	a,(de)
		cp	(hl)
		inc	de
		inc	hl
		jr	z,checkname_2
		pop	hl		; restore text pointer
		scf			; not my statement
		ret
;
checkname_2:	and	a
		jr	nz,checkname_1	; repeat until end of name
;
; Give user the last chance to resume execution of BASIC.
;
		call	PUTSTR
;
		 db	FF
		 db	"**********************************",CR,LF
		 db	"*                                *",CR,LF
		 db	"* MSX-DOS2 Cartrige Self Checker *",CR,LF
		 db	"*                                *",CR,LF
		 db	"*       W A R N I N G ! !        *",CR,LF
		 db	"*                                *",CR,LF
		 db	"* The system will go into a halt *",CR,LF
		 db	"* state after the check.         *",CR,LF
		 db	"*                                *",CR,LF
		 db	"**********************************",CR,LF
		 db	CR,LF
		 db	" Proceed? (Y/N) ",0
;
		call	CHGET		;Wait for user type in.
		call	putcrlf
		and	0DFh		;Upper-case the character
		cp	'N'		; char for escape
		pop	hl		; restore text pointer
		ret	z		; escape (cy=0; statement has executed)
		 ;	 ;
		call	putcrlf
		 ;	 ;
;
;---------------------------------------
; Our routines from now on.  While checking RAM, We will destroy the
; contents of RAM slot.  So any attempt to preserve BASIC environment is
; meaningless.
;
PAGE1		equ	4000h		; top of page-1
PAGE2		equ	8000h		; top of page-2
PAGE3		equ	0C000h		; top of page-3
;
PAG2SEG		equ	0FEh
PAG3SEG		equ	0FFh
;
		ld	hl,SumRoutine
		ld	de,PAGE3
		ld	bc,SumLen
		ldir
;
		ld	hl,(CHGBNK##+1)
		ld	(_chgbnk+1),hl
;
; check BANK 0..3
		xor	a
		ld	h,a		;TOS = BANK #0..#3 checksum total.
		ld	l,a		;
		push	hl
bank_loop:
		call	BANK_SUM
		ex	de,hl
		pop	hl
		add	hl,de
		push	hl
		ex	de,hl
		call	dispsum		; A = bank#
		inc	a
		cp	3+1
		jr	c,bank_loop
;
; BANK total
		pop	hl
		call	dispsum		; A = 4 from routine above

		ld	a,(CHGBNK##+2)	;Get hi byte of bank reg. address.
		cp	7Fh		; Version with 128K RAM?
		call	z,CheckMore	; yes check RAM also.
;
		call	PUTSTR
		 db	CR,'Check finished. Please RESET',0
;
		di			;Do absolutely nothing more.
		jr	$-1

;---------------------------------------
;
; This routine is transferred to page-3 RAM and executed there.
;
SumRoutine:
	.phase	PAGE3
;
SLOT_SUM:	call	GETSLOT##	; preserves E reg.
		push	af
		ld	a,e
		ld	h,40h
		call	ENASLT
		call	CHECKSUM
		pop	af
		push	hl
		ld	h,40h
		call	ENASLT
		pop	hl
		ret
;
BANK_SUM:	di
		push	af
		call	_chgbnk
		call	CHECKSUM
		xor	a
		call	_chgbnk
		pop	af
		ret
;
_chgbnk:	ld	(??????),a
		ret
;
; Check Sum
; sum of active page-1
; output:
;	hl:	check sum
;
CHECKSUM:	ld	hl,0		;HL = checksum.
		ld	b,h
		ld	de,PAGE1
csum_loop:	ld	a,(de)
		inc	de
		ld	c,a
		add	hl,bc
		bit	7,d
		jr	z,csum_loop
		ret
	.dephase
SumLen		equ	$-SumRoutine

;
; display check sum in HL
; input:
;	HL:	sum
;	A:	0-5		; bank0-3, all bank(4), knjd(5)
; preserves:	A, BC, DE, HL
dispsum:
		call	PUTSTR
		 db	'Check sum of ',0
		push	hl
		ld	hl,msgbnk
		cp	4		; knj driver?
		jr	c,dsum_str
		ld	hl,msgtot
		jr	z,dsum_str	; if mode=4, all bank
		ld	hl,msgknj	; only kanji driver
dsum_str:
		call	dispstr
		pop	hl
		call	c,puthex	; put bank number
		call	PUTSTR
		 db	'=',0
		call	put4hex
		jp	putcrlf
;
msgbnk:		db	'BANK',0
msgtot:		db	'Total',0
msgknj:		db	'KANJI',0
;
;
;---------------------------------------------------------------
;
CheckMore:

; check KNJd
;   select #x-2
RSLREG		equ	138h		; read primary slot select register

		call	RSLREG		; read primary slot register
		and	00001100b	; only page-1 info
		rrca			; move info for page-1 into bit 1,0
		rrca
		or	10001000b
		ld	e,a
		call	SLOT_SUM
		ld	a,5
		call	dispsum
;
; RAM check
;
		di			; because of gorigori

; RAMはすべて自分のを使うことにする。
; set #x-1 to page2		; 自分のRAMのseg3をpage2にだす。
		call	RSLREG		; read primary slot register
		and	00001100b	; only page-1 info
		rrca			; move info for page-1 into bit 1,0
		rrca
		or	10000100b	; extended flag
		ld	h,80h
		call	ENASLT

; 自分のRAMにコピーする。もとから自分なら自分自身にコピー。
; copy PAGE3 to PAGE2
		xor	a
		out	(PAG2SEG),a
		ld	hl,PAGE3
		ld	de,PAGE2
		ld	bc,4000h
		ldir

; page3を自分のRAMのseg0にする。
		call	RSLREG
		and	00001100b
		rrca
		rrca
		or	10000100b	; #x-1
		ld	hl,11000000b*256
		call	ENASLT

;  get MaxSegmentNumber in Acc
		call	MapperSize
		ld	c, a
;  check SEGMENT MaxSegmentNumber to 1

if	AUTOSIZE
		ld	b, c
else
		ld	b, 7
endif
ramchk_wr:	ld	a,b
		call	wrram		; write data
		djnz	ramchk_wr
;
if	AUTOSIZE
		ld	b, c
else
		ld	b, 7
endif
ramchk_rd:	ld	a,b
		call	rdram		; check data. Z flag set => error
		djnz	ramchk_rd
;
; check SEGMENT 0
;
; page-2 segment and reg. A = 1 from routine above.
;
		ld	hl,PAGE3	;Copy page-3 contents to segment-1
		ld	de,PAGE2	; in page-2.
		ld	bc,4000h
		ldir
		out	(PAG3SEG),a	;Now use the copy for new page-3
		xor	a
		call	wrram		;Write data
		xor	a
		call	rdram		;Read & check data
		ret
;
;  get MaxSegmentNumber in Acc
;  Inputs:	none
;  Outputs:	A	Max Segment Number
;  Modifies:	AF
MapperSize:
	push	bc
	push	de
	push	hl

;    step 1	Write 0AAh into first byte of all segment 0~255
	ld	hl, PAGE3-1		;  BFFFh
	xor	a
	ld	bc, 0aa55h
MapperSWrLoop:
	out	(PAG2SEG), a		;  select one segment
	ld	(hl), b			;  write initial data 0aah
	inc	a			;  update segment number
	jr	nz, MapperSWrLoop
;    step 2	Read first byte of a segment and compare 0AAh and RAW with 55h
;	xor	a			;  segment number must be zero
	ld	d, a			;  segment number is in D
MapperSRdLoop:
	ld	a, d
	out	(PAG2SEG), a
	ld	a, (hl)			;  get first byte of a segment
	cp	b			;  compare with 0aah
	jr	nz, MapperSEnd
	ld	(hl), c			;  write 055h
	ld	a, (hl)			;  read after write check
	cp	c			;  compare with 055h
	jr	nz, MapperSEnd
	inc	d
	jr	nz, MapperSRdLoop
;	ld	d, 0			;  number of segment is 256
MapperSEnd:
	dec	d			;  set D max segment number
	ld	a, d

	pop	hl
	pop	de
	pop	bc

	ret



;
;---------------------------------------
; Fill page-2 RAM with check pattern.
; Inputs:   A =	segment number.
;		also used as a starting value for write data.
; 		write data changes increasely
; preserves:	BC, DE
wrram:
		out	(PAG2SEG),a
		call	PUTSTR
		 db	CR,'Writing segment ',0
		call	put2hex
		ld	hl,PAGE2
wrram_loop:	ld	(hl),a
		inc	hl
		inc	a
		inc	a
		jr	z,wrram_chk	; skip 0FFh
		dec	a
wrram_chk:	bit	6,h
		jr	z,wrram_loop
		ret
;
;---------------------------------------
; Verify page-2 RAM with check pattern.
; Inputs:   A =	segment number.
;		also used as a starting value for verify data.
; 		verify data changes increasely
; preserves:	BC
rdram:
		ld	d,1		; error flag (1: no error, 2: error)
		out	(PAG2SEG),a
		call	PUTSTR
		 db	CR,'Reading segment ',0
		call	put2hex
		ld	hl,PAGE2
rdram_loop:	ld	e,(hl)
		cp	e
		call	nz,memerr
		inc	hl		;inc after possible error is displayed.
		inc	a
		inc	a
		jr	z,rdram_chk	; skip 0FFh
		dec	a
rdram_chk:	bit	6,h
		jr	z,rdram_loop
		dec	d
		call	nz,putcrlf
		ret
;
; display error information
; input:
;	HL: 	address
;	A:	write data
;	E:	read  data
; output:
;	D:	2
; preserves:	AF, BC, E, HL
memerr:
		push	af
		call	PUTSTR
		 db	CR,LF,' ',0
		res	7,h
		call	put4hex		; address within segment
		set	7,h
		call	PUTSTR
		 db	'  W:',0
		call	put2hex		; written data
		call	PUTSTR
		 db	' R:',0
		ld	a,e
		call	put2hex		; read data
		pop	af
		ld	d,2
		ret
;
;---------------------------------------
; Put in-line string.
; preserves:	AF, BC, DE, HL
;
PUTSTR:		ex	(sp),hl
		call	dispstr
		ex	(sp),hl
		ret
;
; put new line
putcrlf:	ld	hl,crlf
;
; display string 
; preserves:	AF, BC, DE
dispstr:
		push	af
dstr_loop:	ld	a,(hl)
		and	a
		jr	z,dstr_end
		inc	hl
		push	hl
		call	CHPUT
		pop	hl
		jr	dstr_loop
dstr_end:	pop	af
		ret
;
;---------------------------------------
; These are the routines to display hexadecimal.
;
; PUT4HEX puts a word value in 4 digits hexadecimal.
;  inputs: HL = value.
;
; PUT2HEX puts a byte value in 2 digit hexadecimal.
;  inputs:  A = value.
;
; PUTHEX puts a nybble in single digit hexadecimal.
;  inputs:  A = value.
;
put4hex:	push	af
		ld	a,h
		call	put2hex
		ld	a,l
		call	put2hex
		pop	af
		ret
;
put2hex:	push	af
		rrca
		rrca
		rrca
		rrca
		call	puthex
		pop	af
;
puthex:		push	af
		and	0Fh
		cp	10		; Believe it or not, this will
		sbc	a,69h		;  convert 00h~0Fh to its hexadecimal
		daa			;  notation '0'~'9', 'A'~'F'
		call	CHPUT
		pop	af
		ret
;
;---------------------------------------
; String constants.
;
statement:	db	'DOS2MEMCHK',0
;			 moritakachisato
;
crlf:		db	CR,LF,0
;
endif
;
;-----------------------------------------------------------------------------
;
	finish	<DRV>
;
	end
;
