 .Z80    

;*****************************************************************

;**								**

;**		MSX FLOPPY DISK FORMAT ROUTINE			**

;**								**

;**			Ver 0.1		1987-06-02		**

;**					Created by N,ITO	**

;**					Editor  by M.HIRO	**

;**								**

;*****************************************************************

;

EXTRN	      	DISINT,ENAINT		;INTERRUPT HANDLER

EXTRN         	DSKIO          		;DISK I/O  ENTRY

EXTRN		SEEKC			;SEEK PROC.

EXTRN		SETCM			;SET COMMAND & PARAMATER

extrn		RECAL			;recalibrate

EXTRN		TCSEND			;OUT TC_PULSE

EXTRN		RSTRD			;R_PHASE

EXTRN		RDYCHK			;FDD READY CHECK (WAIT UNTILL READY)

EXTRN		READSEC			;READ 1 SECTOR DATA  

EXTRN		WAIT_E_PHASE		;WAIT UNTIL ENDING E-PHASE

EXTRN		RDYENA,RDYALW		;

   IF 		0			;for FS-A1F 

EXTRN		LED_ON,LED_OFF		;

   ENDIF

EXTRN		PHYDRV,PRVDRV

EXTRN		GETWRK

EXTRN		PROMPT

EXTRN		FDCRES

EXTRN		INIHR

EXTRN		MOTSTP

EXTRN		WAITMOT

;

BASENT		EQU	04022H		;ENTRY FOR DISK_BASIC

FUNC		EQU	0F37DH		;ENTRY OF BDOS

KBUF		EQU	0F41FH		;KRUNCH BUFFER OF BASIC

MEMSW		equ	1

;

;=================================

;	FDC REGISTORS ADDRESS

;=================================

;

;FDCCR0		EQU	7FF8H		;FDC CTRL REGISTOR 0

;FDCCR1		EQU	7FF9H		;FDC CTRL REGISTOR 1

;FDCSR		EQU	7FFAH		;FDC STATUS REGISTOR

;FDCDT		EQU	7FFBH		;FDC DATA



;*** MSX-Trubo System mapping 1990/5/7 ***

FDCSR		EQU	7FF4H

FDCCR0		EQU	7FF2H

FDCCR1		EQU	7FF3H

FDCDT		EQU	7FF5H

;

;=================================

;	FORMAT WORK OFFSET

;=================================

;

W_DPADD		EQU	0		;ADDRESS OF BOOT_TABLE(WORD)

W_FDTYP		EQU	2		;DISK DISCRIPTER(BYTE)

W_TSEC		EQU	3		;TOTAL SECTOR COUNT(WORD)

W_BADD		EQU	5		;BUFFER TOP ADDRESS(WORD)

W_BDRV		EQU	7		;CURRENT DRIVE NO.(BYTE)

W_BDRV1		EQU	8		;(BYTE)

W_MDTYP		EQU	9		;MEDIA	TYPE(BYTE)

;

W_CURCLYN	EQU	W_MDTYP+1	;TARGET CYLINDER No.

W_CHRNDT0	EQU	W_CURCLYN+1	;TOP ADDRESS OF C,H,R,N DATA

W_CHRNDT1	EQU	W_CHRNDT0+1	;  36 BYTES WORK AREA FOR C,H,R,N

W_CHRNDT2	EQU	W_CHRNDT0+2

W_CHRNDT3	EQU	W_CHRNDT0+3		

W_FREE		EQU	W_CHRNDT0+36	;TOP ADDRESS TO EXCUTE COMMAND

;

;==================================

;	FOR EXTERN PROC

;==================================

;

CMDBUF0		EQU	10		;

CMDBUF1		EQU	CMDBUF0+1	;

CMDBUF2		EQU	CMDBUF0+2	;

CMDBUF3		EQU	CMDBUF0+3	;

CMDBUF4		EQU	CMDBUF0+4	;

CMDBUF5		EQU	CMDBUF0+5	;

CMDBUF6		EQU	CMDBUF0+6	;

CMDBUF7		EQU	CMDBUF0+7	;

CMDBUF8		EQU	CMDBUF0+8	;

RSTBUF0		EQU	CMDBUF0+9	;

RSTBUF1		EQU	RSTBUF0+1	;

RSTBUF2		EQU	RSTBUF0+2	;

RSTBUF3		EQU	RSTBUF0+3	;

RSTBUF4		EQU	RSTBUF0+4	;

RSTBUF5		EQU	RSTBUF0+5	;

RSTBUF6		EQU	RSTBUF0+6	;

;========== 

;ERROR CODE 

;========== 

;

ERROR		EQU	11000000B	;END MODE MASK_DATA

ERR_CODE_0    	EQU  	12		;BAD COMMAND ERROR 

ERR_CODE_1    	EQU     0       	;WRITE PROTECT ERROR 

ERR_CODE_2	EQU	10		;WRITE FAULT

ERR_CODE_3    	EQU     4       	;CRC ERROR 

ERR_CODE_4    	EQU     2       	;DRIVE NOT READY 

ERR_CODE_5    	EQU     6       	;SEEK ERROR

ERR_CODE_6    	EQU     16      	;TIME OVER ERROR (NO-DISK) 

ERR_CODE_7    	EQU     16      	;LOST DATA ERROR 

ERR_CODE_8    	EQU     16      	;ETC. ERROR 

; 

;============ 

;COMMAND DATA 

;============ 

;

FMTCMD		EQU	04DH

READCMD		EQU	046H

RECALCMD	equ	07h

N		EQU	02H

EOT		EQU	09H

GPL		EQU	50H

DTL		EQU	0FFH

DATA		EQU	40H

NCN		equ	6

;

;============

;COUNT

;============

;

WORKL		EQU	5	    ;LENGTH OF WORK AREA

WKSIZE		EQU	W_CURCLYN   ;WORK SIZE

NCODE		EQU	2	    ;MFM MODE(512BYTES/SECTOR)

MAXSECT		EQU	9	    ;SECTOR NUMBER(9 SECTORS/TRACK)

;MINSIZE	EQU	4	    ;WORK AREA

MINSIZE		EQU	20	    ;WORK AREA ABOVE 5KB 

GAPL		EQU	050H	    ;LENGTH OF GAP3

BLKDT		EQU	040H	    ;DATA OF FREE AREA

;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; 

;    DSKFMT	FORMAT PROGRAM 

;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;

; input:	HL = work top address

;		 A = disk type

;			1 --- 1DD

;			2 --- 2DD

;		 B = work size

;		 D = drive No.

;

; output:	CY=0 format complete

;		  =1 format fault

;		 A=0 write protected disk

;		   2 drive not ready

;		   4 CRC error

;		   6 seek error

; 		   8 record not found

;		  10 write fault

;		  12 bad choice parameter

;		  14 insufficient memory

;		  16 other error (e.t.c over run error)

;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

		PUBLIC	DSKFMT

DSKFMT:

	PUSH    HL

        POP     IY          	; IY <-- HL (WORK AREA TOP ADDR) 

;

        DEC     A               ;0:1DD 1:2DD 

	LD	(IY+W_MDTYP),A	;SAVE FORMAT TYPE

        LD      E,A 

        LD      A,1 

        CP      E                

        LD      A,12

        RET     C 		;RETURN IF BAD FORMAT TYPE (WITHOUT 0,1)

; 

   	LD      A,B 

        CP      MINSIZE

        LD      A,14

        RET     C       	;WORK AREA IS TOO SMALL

; 



        LD      A,D             ;SET DRIVE No. 

        AND     01H 

        LD      (IY+W_BDRV1),A 

	LD	D,A



;;;;;;	PUSH	BC

	PUSH	HL

	PUSH	DE

	CALL	GETWRK

	POP	DE

	LD	A,(IX+PHYDRV)

	DEC	A

	JR	NZ,NO_CHANGE

	LD	A,D

	CP	(IX+PRVDRV)

	JR	Z,NO_CHANGE0

	LD	(IX+PRVDRV),A

	push	de			;1990/9/6

	push	iy			;1990/9/6

	CALL	PROMPT

	pop	iy			;1990/9/6

	pop	de			;1990/9/6

NO_CHANGE0:

	LD	D,0

NO_CHANGE:

	POP	HL

;;;;;	POP	BC

        LD      (IY+W_BDRV),D	;set physical drive No.

; 

        PUSH    HL            	;SAVE BUFFER ADDRESS 

        LD      BC,WKSIZE       ;LENGTH OF WORK AREA 

        ADD     HL,BC           ;HL HAS ADDRESS OF DATA BUFFER 

        LD      (IY+W_BADD),L 

        LD      (IY+W_BADD+1),H ;SET IT

; 

; SET PARAMETERS

; 

        LD      D,0             ;DE<== OFFSET ADDRESS FOR PARAMETER TABLE

        LD      B,WORKL         ;SET COUNTER 

        LD      HL,DATATABLE    ;SET TABLE ADDRESS 

; 

LOOP_1: ADD     HL,DE 

        DJNZ    LOOP_1

; 

        POP     DE              ;HL HAS SELECTED ADDRESS OF PARAMETER

;;;;;;	LD      BC,WORKL        ;SET PARAMETER LENGTH

	LD	C,WORKL		;(B)=0 (C)=WORKL

        LDIR                    ;MOVE IT TO WORK AREA

; 

; 

;-------------------------------------------------------------------

; FORMAT MAIN 

;-------------------------------------------------------------------

;

FMT_PROC:

;

;

	BIT	0,(IY+W_BDRV)	;

	LD	A,00010100B	;IF b0=0 THEN SELECT DRIVE A

	JR	Z,MOT_ON	;	 ELSE SELECT DRIVE B

	LD	A,00100101B	;

MOT_ON:

	LD	(FDCCR0),A	;SELECT DRIVE & MOTOR ON

;;;;;;;	CALL	WAITMOT		;512ms wait

	CALL	WAITMOT		;512ms wait

;

;A1F;;; CALL	LED_ON		;LED ON

;

	PUSH	IY		;SET CYLINDER No. 0

	POP	HL

	LD	DE,W_CURCLYN

	ADD	HL,DE

	LD	(HL),0

;

	INC	HL		;SET C,H,R,N DATA (9*4 BYTES) TO BUFFER

	LD	D,1		;(D):SECTOR No.

	LD	BC,9*256+2	;(B):COUNTER (C):N

SET_CHRN:

	XOR	A		

	LD	(HL),A		;SET CYLINDER No.

	INC	HL

	LD	(HL),A		;SET SIDE No.

	INC	HL

	LD	(HL),D		;SET SECTOR No.

	INC	D

	INC	HL

	LD	(HL),C		;SET RECORD LENGTH (=2)

	INC	HL

	DJNZ	SET_CHRN

;

	PUSH	IY		;(IX):BUFFER TO EXCUTE COMMAND

	POP	HL		;  IX+COMBUF0 -- IX+RSTBUF6

	LD	DE,W_FREE

	ADD	HL,DE

	PUSH	HL

	POP	IX



	; modify for drive off track -----------------------

	;	( V2.2 )

	;	 date 1990-10-19	by M.HIRONAKA

	;	 date 1990-12-6		by M.HIRONAKA	#1

;;#1;;;	push	bc

	ld	a,(iy+W_BDRV)	; get drive #

	ld	(ix+CMDBUF1),a	; set command buffer

	ld	c,NCN		; dummy seek to NCN

	call	SEEKC		; do it

	call	RECAL		; recalibrate

	;;ld	(ix+CMDBUF0),RECALCMD	; re-seek

	;;ld	b,2		; set command parameter #

	;;call	SETCM		;

	;;ld	a,ERR_CODE_8

;;#1;;;	pop	bc

	;;jp	c,FMT_ERR_ESCP	;

	;;call	SEEKING		; seek check

	ld	a,ERR_CODE_5	; seek error ?

	jp	c,FMT_ERR_ESCP	; yes

	; --------------------------------------------------



	CALL	DISINT			;DISBLE INTERRUPT

	DI



FMT_LOOP:

	LD	C,(IY+W_CURCLYN)	;C=CYLINDER NO.

	LD	A,(IY+W_BDRV)

	LD	(IX+CMDBUF1),A		;SET CURRENT DRIVE NO.

;

	CALL	SEEKC	

	LD	A,ERR_CODE_5		;### CAUTION ###

	JR	C,FMT_ERR_ESCP		;### CAUTION ###



	LD	B,0			;SELECT SIDE 0

	CALL	FORMATS			;FORMAT 1 TRACK

	JR	C,FMT_ERR_ESCP		;IN CASE ERROR

;;;;	XOR	A			;(CY)=0

;;;;	CALL	RDCHECK			;READ 1 TRACK

;;;;	JR	C,FMT_ERR_ESCP		;IN CASE ERROR



	BIT	0,(IY+W_FDTYP)		;(IY+FDTYP)=F8 ... 1DD

	JR	Z,NEXT_FMT		; 	   =F9 ... 2DD



	CALL	WAIT_E_PHASE		;15 msec wait for head select enable

	CALL	SETCHRN_SIDE1		;MODIFY <H> BUFFER

	LD	B,00000100B		;SELECT SIDE 1

	CALL	FORMATS			;FORMAT SIDE 1

	JR	C,FMT_ERR_ESCP		;IN CASE ERROR

;;;;	SCF				;(CY)=1

;;;;	CALL	RDCHECK			;READ 1 TRACK

;;;;	JR	C,FMT_ERR_ESCP		;IN CASE ERROR

;

NEXT_FMT:

;*****	CALL	WAIT_E_PHASE	  ;15ms dummy wait

	LD	A,(IY+W_CURCLYN)

	INC	A		

	CP	80		  ;DO FORMAT LAST CYLINDER ?

;;;;	JR	NC,FMT_LOGIC	  ;YES

	JR	NC,FMT_READ_CHK	  ;YES

	LD	(IY+W_CURCLYN),A  ;NO,UPDATE CYLINDER No.

	PUSH	IY

	POP	HL

	LD	BC,W_CHRNDT0

	ADD	HL,BC

	LD	B,9

NEXT_FMT1:

	LD	(HL),A		;SET <C>

	INC	HL

	LD	(HL),0		;SET <H>

	INC	HL

	INC	HL

	INC	HL

	DJNZ	NEXT_FMT1

	JR	FMT_LOOP

;

;   FORMAT ERROR ESCAPE

;

FMT_READ_ERR:

	POP	BC

	POP	HL

FMT_ERR_ESCP:

	PUSH	AF

	EI

	CALL	ENAINT			;ENABLE INTERRUPT

	CALL	MOTSTP

;;;	LD	A,00000100B

;;;	LD	(FDCCR0),A		;MOTOR OFF

;A1F;;;	CALL	LED_OFF			;LED OFF

	POP	AF

	JP 	FMT_L_ERR		;error return

;

;   READ CHECK

;

FMT_READ_CHK:

	PUSH	IY

	POP	HL

	INC	H

	INC	H			;(HL) HL<--IX+512

	LD	DE,0000			;(DE)

	LD	BC,80*256+0F8H

	BIT	0,(IY+W_MDTYP)

	JR	Z,FMT_READ1

	LD 	B,80*2

	INC	C

FMT_READ1:

	PUSH	HL

	PUSH	BC

	PUSH	DE

	LD	B,9

	LD	A,(IY+W_BDRV1)		;(A)

	AND	A			;(CY)

	CALL	DSKIO

	POP	DE

	JR	C,FMT_READ_ERR

	LD	HL,9

	ADD	HL,DE

	EX	DE,HL			;(DE) update

	POP	BC

	POP	HL

	DJNZ	FMT_READ1

;

;====================================================================== 

; DISKETTE  INITIARIZE

;====================================================================== 

; 

;		LOGICAL FORMAT

FMT_LOGIC:

;;;;	EI				;(HL):top address of work area

;;;;	CALL	ENAINT			;ENABLE INTERRUPT

        CALL 	DATACLR    		;BUFFER CLEAR (512B*9)

; 

; SET BOOT DATA 

; 

	PUSH	HL

	EX	DE,HL			;(DE):BUFFER

        LD 	L,(IY+W_DPADD)		;(HL):BOOT DATA

        LD      H,(IY+W_DPADD+1)	

        LD	BC,30 

 	LDIR		           

	LD	HL,BOOT

	LD	BC,B_REN-0C01EH

	LDIR



	POP	HL

	PUSH	HL 

	INC	H

	INC	H

	LD	A,(IY+W_FDTYP)

	LD	(HL),A			;set discripter

	INC	HL

	DEC	(HL)			;set 0FFH

	INC	HL

	DEC	(HL)			;set 0FFH



	INC	H

	INC	H

	INC	H

	INC	H

	CP	0F9H

	JR	NZ,PASS_F

	INC	H

	INC	H

PASS_F:	DEC	(HL)			;set 0FFH

	DEC	HL

	DEC	(HL)			;set 0FFH

	DEC	HL

	LD	(HL),A			;set discripter

	POP	HL



	LD	C,A			;(C)

	LD	B,9			;(B)

	LD	DE,0000			;(DE)

	LD	A,(IY+W_BDRV1)		;(A)

	PUSH	DE

	PUSH	AF

	PUSH	BC

	PUSH	HL

	SCF

	CALL	DSKIO			;BOOT,FAT1,FAT2,DIR write

	JR	C,FMT_L_ERROR

 	POP	HL

	POP	BC

	POP	AF

	POP	DE



	PUSH	DE

	PUSH	AF

	PUSH	BC

	PUSH	HL

	AND	A

	CALL	DSKIO			;read check

	JR	C,FMT_L_ERROR

	POP	HL			;get address

	CALL	DATACLR

	POP	BC

	POP	AF

	POP	DE



	LD	B,5

	LD	DE,9

	PUSH	DE

	PUSH	AF

	PUSH	BC

	PUSH	HL

	SCF	

	CALL	DSKIO			;DIR (5sector) write

	JR	C,FMT_L_ERROR

	POP	HL

	POP	BC

	POP	AF

	POP	DE

	AND	A

	CALL	DSKIO			;read check

	JR	C,FMT_L_ERR

	RET				;COMPLETE TRANSACTION



FMT_L_ERROR:

	POP	HL	

	POP	BC

	POP	DE			;dummy POP

	POP	DE

FMT_L_ERR:

	CP	12

	JR	NZ,FMT_L_ERR1

	LD	A,16

FMT_L_ERR1:

	SCF	

	RET

;

; BUFFER CLEAR

;

DATACLR:

	PUSH	HL

	LD	BC,512*9

DATACLR1:

	LD	(HL),0

	INC	HL

	DEC	BC

	LD	A,B

	OR	C

	JR	NZ,DATACLR1

	POP	HL

	RET

;;

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

; DATA BLOCK FOR FORMAT 

;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ 

;

DATATABLE:

	      DEFW      BOOT_1DD           ;1DD TYPE

	      DEFB      0F8H               ;ID

	      DEFW	720		   ;TOTAL SECTORS

;

; 

              DEFW      BOOT_2DD           ;2DD TYPE 

              DEFB      0F9H

              DEFW      1440

; 

;;

BOOT_1DD:	;80 TRACK ,1 SIDE ,9 SECTOR

;

	      DEFB	0EBH,0FEH,090H     ;JMP SHORT,NOP

	      DEFB	'MSX_03  ' ;       ;OEM NAME

	      DEFW	512	   ;       ;BYTE OF SECTOR

	      DEFB	2	   ;       ;SECTOR OF CLUSTER

	      DEFW	1          ;       ;SECTER OF RESERVE

	      DEFB	2          ;       ;NO OF FAT

	      DEFW	112	   ;       ;DIRECTORIES

	      DEFW	720	   ;       ;TOTAL SECTORS

	      DEFB	0F8H       ;       ;ID

	      DEFW      2	   ;       ;SECTOR OF FAT

	      DEFW	9	   ;       ;SECTOR OF TRACK

	      DEFW	1 	   ;       ;NO OF HEAD

	      DEFW	0	   ;       ;NO OF HIDDEN SECTOR

;

;

; 

BOOT_2DD:     ;;; 80 TRK , 2 SIDE , 9 SECTOR

;

              DEFB      0EBH,0FEH,090H     ; JMP SHORT,NOP

              DEFB      'MSX_04  ' ;+03 ; OEM NAME 

              DEFW      512        ; +0B   ; BYTE OF SECTOR 

              DEFB      2          ; +0D   ; SECTOR OF CLUSTER

              DEFW      1          ; +0E   ; SECTOR OF RESERVE

              DEFB      2          ; +10   ; NO OF FAT

              DEFW      112        ; +11   ; ENTRY OF DIRECTORY    

              DEFW      1440       ; +13   ; TOTAL SECTOR OF MEDIA

              DEFB      0F9H       ; +15   ; FD TYPE

              DEFW      3          ; +16   ; SECTOR OF FAT

              DEFW      9          ; +18   ; SECTOR OF TRACK

              DEFW      2          ; +1A   ; NO OF HEAD 

              DEFW      0          ; +1C   ; NO OF HIDDEN SECTOR

;

;

;

FMT_CMD_TBL:	;FORMAT COMMAND & PARAMATER

		DEFB	FMTCMD

		DEFB	00H

		DEFB	NCODE

		DEFB	MAXSECT

		DEFB	GAPL

		DEFB	DATA



READ_CMD_TBL:	;READ COMMAND & PARAMETER

		DEFB	READCMD

		DEFB	0

		DEFB	0

		DEFB	0

		DEFB	1

		DEFB	N

		DEFB	EOT

		DEFB	GPL

		DEFB	DTL

;

;

;

;

;;

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 

;;

;;  FORMAT  SUBPROGRAMS 

;;

;:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: 

;

;

;-----------------------------------------------

; FORMAT 1 TRACK

;-----------------------------------------------

;input          B --- HEAD No. (00000000..SIDE0 / 00000100..SIDE1)

;

FORMATS:

	CALL	RDYENA			;BE ENABLE TO READY FORM FDD

	LD	A,(IY+W_BDRV)

	LD	(IX+CMDBUF1),A

	CALL	RDYCHK			;CHECK DRIVE READY  

	JP	C,FMTS_NRDY		;DRIVE NOT READY

	BIT	6,A			;WRITE PROTECTED MEDIA ?

	JP	NZ,FMTS_WPRT		;YES



	PUSH	BC			;(B):HEAD No.

	PUSH	IX			;SET HEAD No. & DRIVE No. TO BUFFER

	POP	HL

	LD	DE,CMDBUF0

	ADD	HL,DE

	EX	DE,HL

 	LD	HL,FMT_CMD_TBL

	LD	BC,6

	LDIR

	POP	BC

	LD	A,(IY+W_BDRV)

	OR	B

	LD	(IX+CMDBUF1),A



;;;;;	CALL	DISINT

;;;;;	DI



	LD	B,6

	CALL	SETCM

;;;;;	LD	A,ERR_CODE_8	;ETC.ERROR

;;;;;	RET	C

;

	PUSH	IY

	POP	HL

	LD	BC,W_CHRNDT0

	ADD	HL,BC		;HL = IY + W_CHRNDT0

;;;;;;	LD	BC,FMTS_ERROR	;JP ADDRESS IN CASE ERROR

;;;;;;	PUSH	BC		

;;;;;;	LD	BC,WAIT_E_PHASE ;JP ADDRESS IN CASE ERROR

;;;;;;	PUSH	BC

;

	LD	C,9		;SECTOR COUNTER

	LD	DE,FDCSR	;SET STATUS REGISTER ADDRESS

FMTS_LOOP0:

	PUSH	BC

	LD	BC,0000

FMTS_LOOP1:

	DEC	BC

	LD	A,B

	OR	C

	JR	Z,FMTS_YAME

	LD	A,(DE)

	ADD	A,A

	JP	NC,FMTS_LOOP1

	LD	A,(HL)

	LD	(FDCDT),A

	INC	HL

	POP	BC

	LD	B,4-1

FMTS_LOOP2:

	LD	A,(DE)

	ADD	A,A

	JP	NC,FMTS_LOOP2

	LD	A,(HL)

	LD	(FDCDT),A

	INC	HL

	DJNZ	FMTS_LOOP2

	DEC	C

	JR	NZ,FMTS_LOOP0



FMTS_ERROR:

	CALL	TCSEND		;OUT TC_PULSE



	LD	BC,0000

FMTS_LOOP3:

	DEC	BC

	LD	A,B

	OR	C

	JR	Z,FMTS_STOP

	LD	A,(DE)

	AND 	11000000B	;RQM=1,DIO=1(FDC-->CPU)

	CP	11000000B

	JR	NZ,FMTS_LOOP3

	CALL	RSTRD

;

FMTS_ERROR1:

	CALL	RDYALW		;BE ALWAYS READY FROM FDD

;

;;;;;	EI

;;;;;	CALL	ENAINT

;

	LD	A,(IX+RSTBUF0)

	LD	B,A

	AND	ERROR

	RET	Z		;IN CASE NORMAL END

;

;IN CASE ERROR

;

	SCF

;;;;;;	LD	B,(IX+RSTBUF0)

	BIT	3,B

	LD	A,ERR_CODE_4

	RET	NZ		;DRIVE NOT READY



	BIT	4,B

	LD	A,ERR_CODE_2

	RET	NZ		;WRITE FAULT



;;;;;;	LD	B,(IX+RSTBUF1)

;;;;;;	BIT	1,B

	BIT	1,(IX+RSTBUF1)

	LD	A,ERR_CODE_1

	RET	NZ		;WRITE PROTECTED



	LD	A,ERR_CODE_8

	RET			;ETC. ERROR



FMTS_YAME:

	POP	BC

FMTS_STOP:

	XOR	A

	CALL	FDCRES

	LD	A,00000100B

;;	LD	A,00010100B

	CALL	INIHR

	LD	(IX+RSTBUF0),11001000B

	JR	FMTS_ERROR1



FMTS_NRDY:

	CALL	RDYALW

	LD	A,ERR_CODE_4

	RET

FMTS_WPRT:

	CALL	RDYALW

	XOR	A

	SCF	

	RET



   IF	0

;

;-----------------------------------------------

;READ 1 SECTOR  

;-----------------------------------------------

;input:		CY --- SIDE SELECT  0..SIDE0

;

RDCHECK:

	PUSH	AF

	CALL	RDYENA



	PUSH	IX

	POP	HL

	LD	DE,CMDBUF0

	ADD	HL,DE

	EX	DE,HL

	LD	HL,READ_CMD_TBL

	LD	BC,9

	LDIR

	LD	A,(IY+W_BDRV)		;SET DRIVE No.

	LD	(IX+CMDBUF1),A

	LD	A,(IY+W_CURCLYN)	;SET CYLINDER No.

	LD	(IX+CMDBUF2),A



	POP	AF

	JR	NC,RDCHECK1

	SET	2,(IX+CMDBUF1)		;SET SIDE1

	LD	A,01

	LD	(IX+CMDBUF3),A



RDCHECK1:

	LD	B,1			;(B):SECTOR NO.

	PUSH	IY

	POP	HL

	INC	H

	INC	H			;HL <--- IY+512

RDCHECK_LOOP1:

;;;;;	CALL	DISINT			;DISBLE INTERRUPT

;;;;;	DI

	LD	(IX+CMDBUF4),B		;SET SECTOR No.

	CALL	READSEC			;(HL),(DE),(BC) RESERVE



	CALL	RDYALW

;;;;;	EI

;;;;;	CALL	ENAINT



	LD	A,(IX+RSTBUF0)		;SENSE ST0

	AND	11001000B

	JR	Z,RDCHECK_NEXT

	AND 	00001000B

	SCF

	JR	Z,RDCHECK_ERR0

	LD	A,2

	RET				;'DRIVE NOT READY'

RDCHECK_ERR0:

	LD	E,(IX+RSTBUF1)

	BIT	2,E

	LD	A,8			;'RECORD NOT FOUND'

	RET	NZ

	BIT	5,E		

	LD	A,4			;'CRC ERROR'

	RET	NZ

	LD	A,16			;'OTHER ERROR'

	RET



RDCHECK_NEXT:

	INC	B

	LD	A,9

	CP	B

	JR	NC,RDCHECK_LOOP1

	XOR	A

	RET

   ENDIF



;-----------------------------------------------

;SET CHRN DATA IN WORK AREA

;-----------------------------------------------

;input:		NONE 

;

SETCHRN_SIDE1:

	PUSH	IY

	POP	HL

	LD	DE,W_CHRNDT1		;POINT <N>

	ADD	HL,DE

	LD	B,9

SC_LOOP:

	LD	(HL),1

	INC	HL

	INC	HL

	INC	HL

	INC	HL

	DJNZ	SC_LOOP

	RET

HIRO::

;

;

BOOT:

	.PHASE	0C01EH

;

	RET	NC	;IF NOT CALLED TO INVOKE MSXDOS,JUST

			;RETURN

	LD	($DOSON+1),DE

	LD	(NOTFIRST),A

	LD	(HL),LOW BOOTERRVECT

	INC	HL

	LD	(HL),HIGH BOOTERRVECT

TRYAGAIN:

	LD	SP,KBUF+100H

	LD 	DE,COMFCB

	LD	C,0FH		;OPEN

	CALL	FUNC

	INC	A

	JP	Z,NOFILE	;'COMMAND.COM' DOES NOT EXIST

	LD	DE,100H

	LD	C,1AH		;SET DMA

	CALL	FUNC

	LD	HL,1

	LD	(COMFCB+14),HL

	LD	HL,3F00H	;READ ADD RECORDS TO 100H...3FFFH

	LD	DE,COMFCB

	LD	C,27H		;BLKRD

	CALL	FUNC

	JP	100H		;JUMP TP COMMAND.COM

;

BOOTERRVECT:

	DEFW	BOOTERR

;

BOOTERR:

$DOSON:

	CALL	0		;DUMMY

	LD	A,C

	AND	0FEH

	CP	2

	JP	NZ,BOOTERR1	;DRIVE NOT READY? NO

NOFILE:

	LD	A,(NOTFIRST)

	AND	A

	JP	Z,BASENT	;JUMP TO DISKBASIC

BOOTERR1:

	LD	DE,BOOTERR_MSG

	LD	C,9

	CALL	FUNC

	LD	C,7

	CALL	FUNC

	JR	TRYAGAIN

;

BOOTERR_MSG:

	DEFB	'Boot error',0DH,0AH

	DEFB	'Press any key for retry',0DH,0AH,'$'

;

COMFCB:

	DEFB    0,'MSXDOS  SYS'

  if MEMSW-1

	DEFB    0,0,0,0,0,0,0,0,0,0

	DEFB 	0,0,0,0,0,0,0,0,0,0

	DEFB 	0,0,0,0,0

;

NOTFIRST:

	DEFS 	1

  endif

HIRODAT::

;

B_REN	EQU	$

  if MEMSW

NOTFIRST	equ	$+25

  endif



;

	.DEPHASE

;

END 

