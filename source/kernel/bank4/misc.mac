	.z80
	title	MSX-DOS 2 KERNEL   Copyright (1986)  IS Systems Ltd.
	subttl	Miscellaneous KBDOS functions (bank 4 part)
;******************************************************************************
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
	;RAMMOD

CHPUT	equ	00A2h	
;
;------------------------------------------------------------------------------
;
	PROC	F_LOCK
;
; Locks/unlocks a drive, or gets current lock state
;
; Entry:    E = Physical drive number (0=A:)
;           A = 0 => get current value
;               1 => set new value
;           B = action (only if A=1)
;               0 = unlock
;               FFh = lock
; Returns:  A = error code
;           B = current lock status

	;ld	c,a		;A for the routine is passed in C
	ld	iy,RAM_BASE##

	ld	a,e
	cp	MAX_UNITS##
	ld	a,.IDRV##
	ret	nc

	ld	hl,UNIT_TAB##+2
	ld	d,0
	add	hl,de
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h
	ld	a,.IDRV##	;Return error if drive does not exist
	ret	z

	push	hl
	pop	ix

	ld	a,c
	or	a
	jr	z,mnt_get

	ld	a,b
	or	a
	jr	z,do_ulock

	;--- Lock the drive

do_lock:
	ld	a,(ix+UD_TIME##)
	or	a
	jr	nz,do_mnt_upbok

	push	ix
	pcall	BUILD_UPB
	pcall	NEW_UPB
	pop	ix
	ld	(ix+UD_TIME##),2

do_mnt_upbok:
	pcall	FL_UD
	pcall	INV_UD
	set	UF_LCK,(ix+UD_FLAGS##)

	xor	a
	ld	b,0FFh
	ret

	;--- Unlock the drive

do_ulock:
	ld	a,(ix+UD_TIME##)
	or	a
	jr	z,do_umnt_upbok

	pcall	FL_UD
	pcall	INV_UD
	ld	(ix+UD_TIME##),0

do_umnt_upbok:
	res	UF_LCK,(ix+UD_FLAGS##)

	xor	a
	ld	b,a
	ret

	;--- Get lock status

mnt_get:
	xor	a
	ld	b,a
	bit	UF_LCK,(ix+UD_FLAGS##)
	ret	z
	ld	b,0FFh
	ret


;------------------------------------------------------------------------------
;
	PROC	F_FOUT
;
;    This function gets or sets the value of fast STROUT flag.
; When this flag is set, STROUT will copy the string to $SECBUF before printing it.
; This speeds up printing process, but limits string length to 512 bytes.
;
; Entry:    A = 0 => get current value
;               1 => set new value
;           B = value to set (only if A=1)
;               0 = disable
;               FFh = enable
; Returns:  A = 0 (error code)
;           B = current value, 0 or 1.
;
        ld a,c
		or	a			;Skip if just getting value
		jr	z,fout_get

		ld	a,b
		and	1
		ld	b,a
		ld	a,(MFLAGS##)
		and	0FEh
		or	b
		ld	(MFLAGS##),a
;
fout_get:
		ld	bc,(MFLAGS##-1)	;Get current value into B.
		xor	a
		ret
;
;

;------------------------------------------------------------------------------
;
	PROC	F_RALLOC
;
; Gets or sets the reduced allocation information mode vector
;
; Entry:    A = 0 => get current value
;               1 => set new value
;           HL = value to set (only if A=1)
;               L:0 = state for A:
;               L:1 = state for B:, etc
; Returns:  A = 0 (error code)
;           HL = current value
;                (bits for undefined drives are undefined)

	ld	a,c		;A for the routine is passed in C
	or	a
	jr	z,redv_get

	ld	(iy+@RALL_VECT##),l
if MAX_UNITS## GT 8
	ld	(iy+@RALL_VECT##+1),h
endif

	;--- Now set the UF_RALL bit for each drive that exists

	xor	a
readv_loop:
	push	af
	push	hl
	ld	e,a
	ld	d,0
	ld	hl,UNIT_TAB##+2
	add	hl,de
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	a,d
	or	e
	jr	z,readv_skipdrive	;Skip if undefined drive

	push	de
	pop	ix
	ld	a,(ix+UD_TIME)
	or	a
	jr	z,readv_skipdrive	;Skip if no UPB
	bit	UF_F12,(ix+UD_FLAGS##)
	jr	nz,readv_skipdrive	;Skip if FAT12 drive

	;*** NOTE: M80 gives a R error on "if MAX_UNITS" lines
	;          and compiles always the else clause.
	;          Solve this if MAX_UNITS needs to grow over 8.

	pop	hl	;HL = Vector
if MAX_UNITS## GT 8
	srl	h
endif
	rr	l	;Cy = Value for current drive
	jr	c,readv_set1

readv_set0:
	res	UF_RALL,(ix+UD_FLAGS##)
	jr	readv_nextdrive

readv_set1:
	set	UF_RALL,(ix+UD_FLAGS##)
	jr	readv_nextdrive

readv_skipdrive:
	pop	hl
	srl	l
readv_nextdrive:
	pop	af
	inc	a
	cp	MAX_UNITS##
	jr	c,readv_loop

	;--- Get current vector value

redv_get:
	ld	h,0
	ld	l,(iy+@RALL_VECT##)
if MAX_UNITS## GT 8
	ld	h,(iy+@RALL_VECT##+1)
endif

	xor	a
	ret
;
;------------------------------------------------------------------------------
;
	PROC	F_DSPACE
;
; Gets the total or free disk space for a drive
;
; Entry:    E = drive number (0=default)
;	    A = type of information to obtain
;		0 => free space
;               1 => total space
; Returns:  A = error code
;           HL:DE = space in KBytes
;           BC = extra space in bytes
;
	ld	a,c		;A for the routine is passed in C
	cp	2
	jr	c,dspace_okfn
	ld	a,.ISBFN##
	ret
dspace_okfn:
  
	ld	d,a
	push	de

	ld	c,e			;Validate the specified
	ld	b,0			; drive and return if
	ld	ix,FIB_1##		; any error detected.
	pcall	VAL_FIB
	or	a
	pop	de
	ret	nz

	ld	a,d

	push	hl
	pop	ix
	ld	e,(ix+UD_NCLU##)
	ld	d,(ix+UD_NCLU##+1)
	dec	de			;DE = Total cluster count	

	or	a
	jr	nz,dspace_tokbytes

	;--- Calculate free space

	ld	a,(MFLAGS##)
	and	4	;ZALLOC
	jr	z,DSP_NO_ZALLOC
	bit	UF_RALL,(ix+UD_FLAGS##)
	jr	z,DSP_NO_ZALLOC

	ld	de,0
	jr	DSP_NEXT
DSP_NO_ZALLOC:

	bit	UF_F16,(ix+UD_FLAGS##)
	jr	z,DSP_FAT12

	pcall	ALLF16
	ex	de,hl
	jr	DSP_NEXT

DSP_FAT12:
	inc	de			;DE = Maximum cluster number
	push	de
	ld	de,2			;Start at cluster 2
	ld	b,d			;Free cluster count = 0
	ld	c,d
dspace_free_lp:
	push	de
	pcall	FAT_LOOKUP		;Get next FAT entry.
	ld	a,d
	or	e			;If entry is zero then bump
	pop	de			; the free cluster count.
	jr	nz,dspace_nofree		
	inc	bc
dspace_nofree:

	or	a
	ex	(sp),hl
	sbc	hl,de			;Compare with total number of
	add	hl,de			; clusters from UPB.
	ex	(sp),hl

	inc	de			;DE := next cluster number
	jr	nz,dspace_free_lp	;Loop if not reached end of FAT
	pop	de

	push	bc
	pop	de
DSP_NEXT:

	;--- Now we have a number of clusters in DE.
	;    Transform it to KBytes + extra space.

dspace_tokbytes:
	ld	a,(ix+UD_CMSK##)	;Cluster mask = sectors/cluster-1
	ld	bc,0
	ld	hl,0
	or	a
	jr	nz,dspace_no1sec

	;One sector per cluster:
	;divide cluster count by two,
	;set remainder as extra space.

	srl	d
	rr	e
	rl	b
	sla	b
	jr	dspace_end

	;More than one sector per cluster:
	;Calculate size in KBytes.

dspace_no1sec:
	rra	;To get size in K, not in sectors
dspace_c2k_loop:
	rra
	jr	nc,dspace_end
	sla	e
	rl	d
	rl	l
	rl	h
	jr	dspace_c2k_loop

dspace_end:
	xor	a
	ret

;
;------------------------------------------------------------------------------
;
	PROC	F_GETCLUS

; Get information about a cluster on a FAT drive.
;
; Entry:    C (A) = drive number (0=default)
;	        DE = cluster number
;		    HL = address of a 16 byte buffer to get information
; Returns:  A = error code
;           Information in (HL) as follows:
;           +0 (2): Absolute FAT sector number that contains the entry for the cluster
;           +2 (2): Offset in the FAT sector for the entry for the cluster (0-511)
;           +4 (4): Absolute sector number in the device the cluster refers to
;           +8 (2): Value of the FAT entry: 
;                   0: Unused cluster
;                   0FF7h-0FFFh (FAT12) or FFF7h-FFFFh (FAT16): last cluster of the file
;                   Other: next cluster of the file
;           +10 (1): Sectors per cluster of the drive
;           +11 (1): Flags
;                    bit 0: set if the drive is FAT12
;                    bit 1: set if the drive is FAT16
;                    bit 2: set if it's an odd entry (always 0 on FAT16)
;                    bit 3: set if it's the last cluster of a file
;                    bit 4: set if it's an unused cluster
;           +12..+15: Unused, always zero
;
    push hl
    push de
    ;ld	c,a			;Validate the specified
	ld	b,0			; drive and return if
	ld	ix,FIB_1##		; any error detected.
	pcall	VAL_FIB
	or	a
	pop	de
    pop ix  ;IX=user buffer
	ret	nz

    ;Set the drive parameters in the result

    push ix
    push hl ;Unit descriptor
    pop ix

    ld b,(ix+UD_CMSK##)
    inc b   ;Sectors per cluster
    ld a,(ix+UD_FLAGS##)

    push ix
    pop hl
    pop ix

    and 11b ;FAT12/16 flags
    ld (ix+11),a
    or a
    ld a,.NDOS##
    ret z   ;Drive is neither FAT12 nor FAT16
    ld (ix+10),b

    ;Cluster numbers 0 and 1 are invalid

    dec de
    dec de
    xor a
    bit 7,d
    ld a,.ICLUS##
    ret nz
    inc de
    inc de

    ;Get cluster info

    push de

    push ix
    pcall FNDFAT
    pop ix
    jr nz,FGC_BADCLUS

    jr nc,FGC_ISEVEN
    set 2,(ix+11)   ;It's an odd entry
FGC_ISEVEN:

    pcall RDFATENTRY
    jr nc,FGC_NOLAST
    set 3,(ix+11)
    ld de,(TEMP_FAT##+4)
FGC_NOLAST:
    ld (ix+8),e     ;FAT entry value
    ld (ix+9),d

    ld a,d
    or e
    jr nz,FGC_ISUSED
    set 4,(ix+11)
FGC_ISUSED:  

    pop de

    xor a
    pcall CLU_TO_SEC
    ld (ix+4),e     ;First absolute data sector number
    ld (ix+5),d
    ld (ix+6),a
    ld (ix+7),0

    ld hl,(TEMP_FAT##)  ;FAT sector number
    ld (ix),l
    ld (ix+1),h
    ld hl,(TEMP_FAT##+2)  ;Offset of cluster entry in FAT
    ld a,h
    and 1   ;Convert to offset relative to the FAT sector
    ld (ix+2),l
    ld (ix+3),a

    xor a
    ld (ix+12),a
    ld (ix+13),a
    ld (ix+14),a
    ld (ix+15),a
    ret

FGC_BADCLUS:
    pop de
    ld a,.ICLUS##
    ret

;
;
;------------------------------------------------------------------------------
;
	PROC	F_RAMD
;
;    This is the "create/destroy RAM disk" KBDOS function.  It is  passed  the
; number  of  segments to use for the RAM disk in register B.  If this is 0FFh
; then it will simply return the current RAM disk size.  If B=00h then the RAM
; disk  will  be destroyed, otherwise a new one will be created with a maximum
; size as specified in register B.
;
;    This routine has the job of allocating  and  freeing  the  segments,  and
; setting  up  the RAM disk unit descriptor.  The setting up of the UPB in the
; boot sector is done by the RAM disk itself when "VAL_FIB" is called, and the
; initialising of the FATs and root directory is done by  the  "FAT_INIT"  and
; "ZERO_CLUSTER" routines which are called by this routine.
;
; Entry:      B =     00h => destroy RAMdisk
;                 1...FEh => create RAMdisk with this maximum size
;                     FFh => return current RAMdisk size
; Returns:    A = Error code
;             B = Current RAMdisk size, 0 => no RAMdisk
;
RAMD_NUM	equ	"H"-"A"+1
;
		push	bc
		ld	b,RAMD_NUM		;Un-assign the RAM disk's
		ld	d,b			; logical drive.
		pcall	F_ASSIGN
		pop	bc
;
		inc	b			;Skip if just asking how
		jp	z,ramdisk_ret_ok	; big the RAM disk is.
		dec	b			;Skip if killing an existing
		jp	z,kill_ramdisk		; RAM disk.
;
;       ----------------------------------------
;
		ld	hl,(UNIT_TAB##+2*RAMD_NUM) ;If unit descriptor for
		ld	a,h			   ; "H:" already exists
		or	l			   ; then give an error as
		ld	c,.RAMDX##		   ; we can't have two
		jp	nz,ramdisk_ret_c	   ; RAM disks.
;
		call	ZAP_RAMD		;Zero the boot sector to give
						; a nice clean starting point
;
		ld	de,RD_LIST##		;Loop to allocate system
		ld	hl,RD_COUNT##		; segments until we run out
all_seg_loop:	exx				; or we have got the required
		ld	a,1			; number of segments. (B=30h
		ld	b,00110000b		; => only use primary mapper
		pcall	ALL_SEG			;    as "last resort".
		jr	c,no_free_seg		;Exit if no free segments
		push	bc
		exx
		inc	(hl)			;Bump segment count
		ld	(de),a			;Record segment number
		inc	de
		pop	af
		ld	(de),a			;Record slot number.
		inc	de
		djnz	all_seg_loop
no_free_seg:
;
		ld	a,(RD_COUNT##)		;If we could not allocate
		or	a			; any segments at all then
		ld	a,c			; exit with an error.
		ld	c,.NORAM##
		jp	z,ramdisk_ret_c
;
		ld	hl,(RM_UD##)		   ;Record the RAM disk's unit
		ld	(UNIT_TAB##+2*RAMD_NUM),hl ; descriptor address.
;
		ld	a,RAMD_NUM
		push	hl			;Setup a few important fields
		pop	ix			; of the unit descriptor.
		ld	(ix+UD_PHYS##),a	;Physical unit number
		ld	(ix+UD_TIME##),0	;No current UPB
		ld	(ix+UD_CDIR##+1),0FFh	;Current directory is root
		ld	(ix+UD_CDIR##),0FFh
;
		ld	c,a			;Validate the RAM disk, this
		ld	ix,FIB_1		; will set up the UPB but
		ld	b,0			; won't initialise the root
		pcall	VAL_FIB			; directory or FAT's
;
		ld	a,0FFh			;Setup FAT's with a fixed
		pcall	FAT_INIT		; media byte value.
		ld	de,0
		pcall	ZERO_CLUSTER		;Setup root directory
		pcall	FL_UD			;Flush buffers to disk.

		jr	ramdisk_ret_ok		;Jump to return no error
;
;       ----------------------------------------
;
kill_ramdisk:	ld	hl,(UNIT_TAB##+2*RAMD_NUM) ;Don't do anything if
		ld	a,h			   ; there is no RAM disk
		or	l			   ; to destroy.
		jr	z,ramdisk_ret_ok
;
		ld	a,RAMD_NUM		;Invalidate any buffers for
		pcall	INV_PHYS		; the RAM disk.
;
		ld	hl,0			   ;Remove the RAM disk from
		ld	(UNIT_TAB##+2*RAMD_NUM),hl ; the unit descr. table.

		xor	a			;Set RAM disk segment count
		ld	(RD_COUNT##),a		; to zero.
;
		ld	hl,RD_LIST##
kill_ramd_loop:	ld	c,(hl)			;Now loop through the
		inc	hl			; segment list, freeing
		ld	b,(hl)			; each segment in turn until
		inc	hl			; we reach slot number
		ld	a,b			; zero which indicates end of
		or	a			; the list.
		jr	z,ramdisk_ret_ok
		push	hl
		ld	a,c
		pcall	FRE_SEG
		pop	hl
		jr	kill_ramd_loop
;
;       ----------------------------------------
;
ramdisk_ret_ok:	ld	c,0
ramdisk_ret_c:	ld	a,(RD_COUNT##)		;Always return with RAM disk
		ld	b,a			; size in B and error code
		ld	a,c			; in A.
		ret
;
;
;       ----------------------------------------
;
	PROC	ZAP_RAMD
;
		ld	hl,RD_BOOT##		;Simple routine to zero
		ld	de,RD_END##-RD_BOOT##	; the RAM disk boot sector.
zap_boot_loop:	ld	(hl),0
		inc	hl
		dec	de
		ld	a,d
		or	e
		jr	nz,zap_boot_loop
		ret	

	finish	<MISC>
	end
;
