	.z80
	title	MSX-DOS 2 ROM   Copyright (1986)  IS Systems Ltd.
	subttl	ROM Header for MSX-DOS 2.0 ROM
;-----------------------------------------------------------------------------
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
;
;
; This  is the ROM header for the MSX-DOS ROM.  It must always be linked first
; in the ROM so it appears at 4000h.
;
;-----------------------------------------------------------------------------
;
CALBAS		equ	0159h
PPI.AR		equ	0A8h		;PPI Port A data read


ROMST::		defb	"AB"		;Indicates valid ROM
if 0
		defw	DOINIT		;Banked ROM initialization entry point
else
		defw	INIT##		;Initialization entry point
endif
		defw	STATEMENT##	;BASIC statement handler entry point
		defw	BASDEV		;Extension device is handled by driver
		defw	0		;No BASIC program text
		defw	0		;Reserved
		defw	0		;Reserved
		defw	0		;Reserved
;
;
DRVENT::				; DISK DRIVER ENTRY POINTS
;
DKRWENT::	jp	DIO_ENTRY##	;Sector read/write
DKCHGENT::	jp	CHG_ENTRY##	;Disk change detection
GTDPBENT::	jp	DPB_ENTRY##	;Get disk parameter block
CHOIENT::	jp	CHO_ENTRY##	;Get format choice string
DKFMTENT::	jp	FMT_ENTRY##	;Format a disk
MTOFFENT::	jp	MOF_ENTRY##	;Turn motor off
;
;
BASENT::	jp	BASIC##		;Entry point for "BASIC" command
					; from MSX-DOS CLI.
;
FORENT::	scf			;Entry point for "FORMAT" command
		jp	$FORMAT##	; from MSX-DOS CLI.
;
		jp	$MTOFF##	;Entry point to switch motor off
		nop			; on all drives.
;
GSLOT1:		jp	GSLT1##		;GSLOT1 routine, used by disk
					; drivers and XFER. (402Dh)
;
		ld	hl,(DOSHIM##)	;Version 1 compatible $INIT entry
		ret			; and should not move.
;
		jp	BIOS_STAT##	;Version 1 compatible $STAT entry
		nop
;
$DOSVER::	defw	_$DOSVER##	;DOS version string.
		defw	0

		ld	a,(hl)		;403Ch - RDBANK, read byte from bank.
		ret		;Use with CALBNK to the desired bank,
		ret		;pass read address in HL.
		jp	CALLB0		;403Fh
		jp	CALBNK		;4042h
		jp	GWRK##		;4045h
		jp	CALDRV		;4048h
;
;
; --------  UP TO HERE ARE REFERENCED FROM OUTSIDE OF ROM  --------
;

; Call extended BIOS processing code
; Extended BIOS code in driver will be called with D'=1.
; It must return with D'=1 if old extended BIOS hook is
; to be called, with D'=0 otherwise.

@EXTBIO::	ld	ix,MAPBIO##
		ex	af,af'
		xor	a
		call	CALBNK
		exx
		ex	af,af'
		bit	0,d
		jr	z,EXTB_RET
		exx
		ex	af,af'
		jp	FCALSAV##
EXTB_RET:	exx
		ex	af,af'
		ret
		
;
;-----------------------------------------------------------------------------
;
; Call a routine in another bank (used by DOS 2 kernel code only)

if 0

CALBNK:
		call	CHGBNK##	;Select desired bank
		ex	af,af'		;Restore AF
		call	JPIX		;Go do the function
		ex	af,af'
		xor	a
		call	CHGBNK##	;Always re-select bank #0
		ex	af,af'
		ret
endif
;
JPHL	equ	$+1
JPIX:		jp	(ix)
;

;
;-----------------------------------------------------------------------------
;
; Call a routine in the disk driver (bank 6)
; Input: (BK4_ADD) = Routine address
;        AF, BC, DE, HL, IY passed to the routine

CALDRV:
		ld	ix,(BK4_ADD##)
		ex	af,af'
		ld	a,DV_BANK##
		jr	CALBNK

;
;-----------------------------------------------------------------------------
;
; BASIC expansion device management

BASDEV:		ld	ix,DV_BASDEV##
		ex	af,af'
		ld	a,DV_BANK##
		jr	CALBNK

		defs	ROMST+78h-$,0FFh
;
;-----------------------------------------------------------------------------
;
		jp	BIOS_IN##	;Version 1 compatible $IN entry

		defs	ROMST+80h-$,0FFh
;
RAMENT::				; RAM DISK DRIVER ENTRY POINTS
;
		jp	R_DSKIO##	;Sector read/write
		jp	R_DSKCHG##	;Disk change detection
		jp	R_GETDPB##	;Get disk parameter block
		jp	R_CHOICE##	;Get format choice string
		jp	R_DSKFMT##	;Format a disk
;
;
		defs	ROMST+8Fh-$,0FFh

		jp	BIOS_OUT##	;Version 1 compatible $OUT entry
;
;
;-----------------------------------------------------------------------------
;
; Call routine in bank 4, routine address is placed in BK4_ADD

?C4PBK::	ld	a,(BNK_ID##)
		jr	CALL4_COMMON

?CALL4::	xor	a

CALL4_COMMON:	push	af
		ld	a,4
		call	CHGBNK##	;Select desired bank
		ld	ix,(BK4_ADD##)
		ex	af,af'		;Restore AF
		ld	iy,RAM_BASE##	;Required for function calls
		call	JPIX		;Go do the function
		ex	af,af'
		pop	af
		call	CHGBNK##	;Re-select bank #0 (CALL4)
		ex	af,af'		;or previous bank (C4PBK)
		ret

;-----------------------------------------------------------------------------
;
; Switch bank 0 or 3 in page 1, then call routine whose address is at (BK4_ADD),
; then restore original bank.
; All registers are passed to the routine called except alternate (D' is passed).

CALLB0:		ex	af,af'
		ld	a,(MAIN_BANK##)
		push	ix
		exx
		pop hl
		exx
		ld	ix,(BK4_ADD##)
		jr	CALBNK

;-----------------------------------------------------------------------------
;
; CALBNK: call a routine in another bank (can be used by driver code)
; Input: A = Bank number
;        IX = Routine address
;        AF' = AF for the routine
;        HL' = IX for the routine
;        BC, DE, HL, IY passed to the routine

; DV_TIRQ is the entry for the driver timer interrupt code.

DV_TIRQ::	ex	af,af'
		ld	a,DV_BANK##
		ld	ix,DV_TIMI##

CALBNK:		exx
		ld	e,a
		ld	a,(BNK_ID##)
		push	af
		ld	bc,CBNK_CONT
		push	bc
		push	ix
		push	hl
		pop	ix
		ld	a,e
		exx
		call	CHGBNK##	;Select desired bank
		ex	af,af'
		ret			;Go do the function
CBNK_CONT:		
		ex	af,af'
		pop	af
		call	CHGBNK##	;Always re-select bank #0
		ex	af,af'
		ret

;-----------------------------------------------------------------------------
;
; Destination of timer interrupt routine:
; Call the TIMINT routine in bank 0,
; this will do the system work and then
; it will call DV_TIRQ via TIMI_DRV.
;
; It is necessary to do this in this way to support
; Nextor kernels acting as slaves.

@TIME_IRQ::	push	af		;Preserve VDP status
		ld	a,(BNK_ID##)	;Save current bank
		push	af
		xor 	a		
		call	CHGBNK##
		call	TIMINT##
		pop	af		;Restore old bank
		call	CHGBNK##
		pop	af		;Restore VDP status
		ret

DOINIT:		xor	a		;Jump to the INIT routine in bank-0
		call	CHGBNK##
		jp	INIT##

HEADEND::
	finish	<DOSHEAD>
	end
;
