	.z80
	title	MSX-DOS 2 KERNEL   Copyright (1986)  IS Systems Ltd.
	subttl	Environment String Functions
;******************************************************************************
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
	;RAMMOD		;Removed since now this code is ran from bank 4 of ROM
;
;-----------------------------------------------------------------------------
;
	PROC	F_GENV
		xor	a
	PROC	GET_ENV
		ld	(EV_PG##),a
;
;    This is the "get environment item" KBDOS function call.   It  looks  down
; the  environment  list  for a match with a name string specified by the user
; and if it finds one then the value string is copied into the user's  buffer.
; An  error  can  result  if the buffer is not big enough.  If no match to the
; specified name is found then a null value string will be returned.
;
; Entry:      HL -> Name string
;             DE -> Buffer for value string
;              B =  Buffer size
; Returns:     A =  Error code
;             DE -> Buffer containing value (unaltered if A<>0)
;
		xor	a
		push	bc			;Check that name string is
		call	ENV_CHECK		; valid and moan if it
		pop	bc			; is not.
		ret	nz
;
		push	de			;Save buffer pointer and
		push	bc			; length byte.
		ld	de,ENV_PTR##
		call	FIND_ENV_ITEM		;Look for the item
		ld	de,NULL_ENV_NAME
		jr	nc,env_no_match		;DE -> value string or
		ld	d,b			; null string if no match
		ld	e,c			; was found.
env_no_match:
		pop	bc
		pop	hl			;Copy the value string
		call	COPY_ENV_OUT		; into the user's buffer
		ex	de,hl
		ret
;
;
;-----------------------------------------------------------------------------
;
	PROC	F_SENV
		xor	a
		ld	(EV_PG##),a

		call	CHECK_SPECIAL
		xor	a
;
;    This  is  the "set environment item" KBDOS function call.  It checks that
; the name strings is valid and if so allocates RAM for a new environment item
; large enough to contain both the name and value strings and a link.  The two
; strings are then copied into this buffer and upper cased and the new item is
; linked onto the start of the environment list.  A check is then done to look
; for a match with the name string and if found then that item is deleted from
; the  list using the routine "FR_LINK" which is also used to free file access
; blocks. An error can result if there is  not  enough  memory  or  if  either
; string is invalid.
;
; Entry:      HL -> Name string
;             DE -> Value string
; Returns:     A =  Error code
;
;
		;assume A=0 (set "xor a")
		call	ENV_CHECK		;Check "NAME" string and
		ret	nz			; error if invalid.
		ld	a,b
		or	a			;Return with no error if
		ret	z			; name string is null.
		ex	af,af'			;Save length in A'
;
		ex	de,hl
		ld	a,0FFh
		call	ENV_CHECK		;Check "VALUE" string and
		ret	nz			; error if too long.
;
		ld	a,b			;If value string is null then
		or	a			; we are going to remove the
		jr	z,null_value		; item so skip.
;
		ex	af,af'
		add	a,b			;Add the two string lengths
		ld	c,a			; (B and C) together to get
		ld	a,0			; total length in BC.
		adc	a,a
		ld	b,a
;
		push	hl			;Add on space for pointer
		ld	hl,2+1+1		; and two terminating nulls
		add	hl,bc			; and try to allocate this
		pcall	ALL_P2			; amount of RAM.
		pop	bc
		ret	nz			;Error of out of memory.
		push	bc
;
		ld	bc,(ENV_PTR##)		;Link the new item into
		ld	(ENV_PTR##),hl		; the beginning of the
		ld	(hl),c			; environment list.
		inc	hl
		ld	(hl),b
		inc	hl
;
		ex	de,hl			;Copy "NAME" string into
		xor	a			; the new environment item
		call	COPY_ENV_IN		; upper casing it.
		ex	(sp),hl
		ld	a,0FFh			;Copy "VALUE" string in
		call	COPY_ENV_IN		; without upper-casing it.
;
		pop	hl			;Skip to check for a dupliacte
		ld	de,(ENV_PTR##)		; item of the same name to
		jr	check_duplicate		; delete.
;
;
null_value:	ex	de,hl			;Null value - so just prepare
		ld	de,ENV_PTR##		; to delete a matching item.
;
check_duplicate:call	FIND_ENV_ITEM		;Look for a matching item
		ld	hl,ENV_PTR##		; and if one was found then
		pcall	c,FR_LINK		; throw it away.
		xor	a
		ret				;Return with no error.

	;Check for ZALLOC and ERRLANG

CHECK_SPECIAL:
	push	hl	;Name
	push	de	;Value

CHECK_ZALLOC:
	ld	de,ZALLOC_S
	call	COMPARE_ENV
	jr	nz,CHKZALLOC_END

	pop	hl	;Value
	push	hl
	ld	de,ON_S
	call	COMPARE_ENV
	ld	a,(MFLAGS##)
	jr	nz,ZALLOC_OFF

ZALLOC_ON:
	or	4
	jr	ZALLOC_END

ZALLOC_OFF:
	and	255-4

ZALLOC_END:
	ld	(MFLAGS##),a
CHKZALLOC_END:
	pop	de
	pop	hl
	push	hl
	push	de

CHECK_ERRLANG:
	ld	de,ERRLANG_S
	call	COMPARE_ENV
	jr	nz,CHKERRLANG_END

	pop	hl	;Value
	push	hl
	ld	de,EN_S
	call	COMPARE_ENV
	ld	a,(MFLAGS##)
	jr	nz,ERRLANG_OFF

ERRLANG_ON:
	or	8
	jr	ERRLANG_END

ERRLANG_OFF:
	and	255-8

ERRLANG_END:
	ld	(MFLAGS##),a
CHKERRLANG_END:
	pop	de
	pop	hl
	ret

ZALLOC_S:	db	"ZALLOC",0
ERRLANG_S:	db	"ERRLANG",0
ON_S:	db	"ON",0
EN_S:	db	"EN",0
;
;
;-----------------------------------------------------------------------------
;
	PROC	F_FENV
		xor	a
		ld	(EV_PG##),a
;
;    This is the "find environment item" KBDOS function call.  If  the  number
; specified  is  greater  than  the  number  of environment items then it will
; simply return a null string with no error.  An error will only be  generated
; if  the  string  is too long for the user's buffer.  In this case the string
; will be truncated and will not have a terminating null.
;
; Entry:      DE =  Environment item number (1st item is E=1)
;             HL -> Buffer for name string
;              B =  Buffer size
; Returns:     A =  Error code
;             HL =  Preserved (buffer filled with ASCIIZ string)
;
;
		push	hl
		push	bc
		ld	b,d
		ld	c,e
		ld	hl,(ENV_PTR##)
find_env_loop:	ld	a,h
		or	l
		ld	de,NULL_ENV_NAME
		jr	z,env_not_found
		ld	e,(hl)
		inc	hl
		ld	d,(hl)
		inc	hl
		ex	de,hl
		dec	bc
		ld	a,b
		or	c
		jr	nz,find_env_loop
;
env_not_found:	pop	bc
		pop	hl
		jp	COPY_ENV_OUT
;
;
NULL_ENV_NAME:	db	0
NULL_ENV_VALUE:	db	0
;
;
;-----------------------------------------------------------------------------
;
	PROC	ENV_KILL
;
;    This routine is called by "JOIN" to re-initialise the environment system.
; It simply frees each item in turn until there are none left.
;
; Entry:    None
; Returns:  None
; Corrupts:  AF,BC,DE,HL
;
;
		ld	hl,(ENV_PTR##)
env_kill_loop:	ld	a,h
		or	l			;Return when reached end
		ret	z			; of chain.
;
		ld	e,(hl)
		inc	hl			;Get pointer to next item
		ld	d,(hl)
		dec	hl
		pcall	FR_P2			;Free this item
		ex	de,hl
		ld	(ENV_PTR##),hl		;Update head pointer
		jr	env_kill_loop		;Loop for next item.
;
;
;-----------------------------------------------------------------------------
;
FIND_ENV_ITEM:
;
;    This routine searches down the environment list looking for a match with
; a "NAME" string in the user's TPA space.  If a match is found then a pointer
; to the "VALUE" string of the matched item is returned, and also a pointer
; to the start of the item itself.
;
; Entry:        HL -> "NAME" string in user's TPA space
;               DE =  Indirect pointer to first item
; Returns:   Carry -   set  => item was found
;                     clear => item was not found
;               DE -> Item which matched
;               BC -> "VALUE" string in this item
; Corrupts:   AF,BC,DE
;
;
find_env_item:	ex	de,hl
		ld	a,(hl)			;Get pointer to next item to
		inc	hl			; check and return with
		ld	h,(hl)			; Carry clear if it is the
		ld	l,a			; end of the list.
		or	h
		ex	de,hl
		ret	z
;
		push	de			;Save item pointer
		push	hl			;Save "NAME" string pointer
		inc	de
		inc	de			;Compare the "NAME" string
		call	COMPARE_ENV		; with the one in this item.
		ld	b,d
		ld	c,e			;BC -> "VALUE" string
		pop	hl			;HL -> user's "NAME" string
		pop	de			;DE -> start of this item
		jr	nz,find_env_item	;Loop if no match
;
		scf				;If match then return with
		ret				; carry flag set.
;
;
;-----------------------------------------------------------------------------
;
ENV_CHECK:
;
;    This  routine  finds  out  the length of a string pointed to by HL in the
; user's TPA space.  It returns an error if the string is too long  or  if  it
; contains  any  invalid  characters.   A  flag  is passed in register A which
; suppresses the upper casing and valid character testing for value strings  -
; these are just checked for length.
;
; Entry:     HL -> User's ASCIIZ string in TPA space
;             A =  00h => upper case and check characters (NAME strings)
;                  FFh => just check length (VALUE strings)
; Returns:    A =  Error code (flags set appropriately)
;             B =  Length of string (excluding terminating null)
; Corrupts:  AF,BC
;
;
		push	hl
		and	CFM_UP			;Set upper case flag if
		ld	c,a			; doing value string.
		ld	b,0FFh
env_check_loop:	call	GET_ENV_CHAR		;Get next character from
		inc	hl			; the user's string and
		pcall	CHK_CHAR		; upper case it.
		jr	z,env_check_ok		;Jump if reached end
		bit	CF_UP,c			;Don't check for terminators
		jr	nz,valid_char		; if doing value string.
		bit	CF_TE,c
		ld	a,.IENV##		;Error if it is an invalid
		jr	nz,env_check_err	; character.
valid_char:	djnz	env_check_loop		;Loop for next character
		ld	a,.ELONG##		; and give error if it
		jr	env_check_err		; is too long.
;
env_check_ok:	dec	a
		sub	b			;If string is OK then set
		ld	b,a			; B to the length of the
		xor	a			; string (without null).
env_check_err:	pop	hl
		or	a
		ret
;
;
;-----------------------------------------------------------------------------
;
COPY_ENV_OUT:
;
;    This routine copies a string pinted to by DE to the user's buffer in TPA
; space, pointed to by HL.  The size of the user's buffer (which may be zero)
; must be specified in register B.  An error code is returned if the string
; is too long for the user's buffer.
;
; Entry:     HL -> User's buffer in TPA space
;            DE -> ASCIIZ string to be copied
;             B =  Size of user's buffer
; Returns:    A = Error code (flags set appropriately)
; Corrupts:  AF,BC
;
;
		push	hl
		push	de
;
copy_out_loop:	ld	a,b			;If remaining size of buffer
		dec	b			; is zero then return an
		or	a			; error.
		ld	a,.ELONG##
		jr	z,copy_out_err
;
		ld	a,(de)			;Get next character and write
		call	PUT_ENV_CHAR		; it into the user's buffer.
		inc	hl
		ld	a,(de)
		inc	de
		or	a			;Loop until end of string.
		jr	nz,copy_out_loop
;
copy_out_err:	pop	de
		pop	hl
		or	a
		ret
;
;
;-----------------------------------------------------------------------------
;
COPY_ENV_IN:
;
;    This  routine copies a string pointed to by HL from the user's TPA space,
; to  a  buffer pointed to by DE.  No length checking is done, the buffer must
; be big enough for the string.  The string is upper cased  if  A=0  on  entry
; otherwise it is copied directly.
;
; Entry:     HL -> User's ASCIIZ string in TPA space
;            DE -> buffer for string to be copied to
;             A =  00h => upper case (NAME strings)
;                  FFh => don't upper case (VALUE strings)
; Returns:   DE -> Next byte in buffer (after the null)
; Corrupts:  AF,BC,DE
;
;
		push	hl
		and	CFM_UP			;Setup upper-casing flag
		ld	c,a
copy_in_loop:	call	GET_ENV_CHAR		;Get next character from
		inc	hl			; the user's string and
		pcall	CHK_CHAR		; upper case it.
		ld	(de),a
		inc	de			;Put character into the
		or	a			; buffer and loop until
		jr	nz,copy_in_loop		; it is end of string.
		pop	hl
		ret
;
;
;-----------------------------------------------------------------------------
;
COMPARE_ENV:
;
;    This routine compares two ASCIIZ strings, one in the user's TPA space and
; the other in normal  memory.   The  Z-flag  is  returned  set  if  they  are
; identical.  The comparison does not distinguish between upper and lower case
; in the user's string, but the other string must always be upper cased.
;
; Entry:        HL -> ASCIIZ string in user's TPA space
;               DE -> ASCIIZ string in normal memory
; Returns:  Z-flag -   set  => strings are identical
;                     clear => strings are different
;            DE,HL -> after null or after non-matching char
; Corrupts:  AF,BC,DE,HL
;
;
		ld	c,0
comp_env_loop:	call	GET_ENV_CHAR		;Get next character from
		inc	hl			; the user's string and
		pcall	CHK_CHAR		; upper case it.
		ld	b,a
		ld	a,(de)			;Compare the two characters
		inc	de			; and return NZ if they
		cp	b			; are not the same.
		ret	nz
		or	a			;Loop until end of string
		jr	nz,comp_env_loop
		ret				;Return Z-set => identical
;
;
;-----------------------------------------------------------------------------
;
;    These are the primative routines which get and put a byte at  an  address
; in the user's TPA, or current memory space (depending on the paging mode set
; in "EV_PG") at an address pointed to by HL.  All  registers  except  AF  are
; preserved.
;
GET_ENV_CHAR:	
		ld	a,(EV_PG##)
		or	a
		ld	a,(hl)
		ret	nz

		push	hl
		ex	de,hl
		ld	a,(EV_PG##)
		pcall	GET_SEGMENT
		ex	de,hl
		call	RD_SEG##
		ei
		pop	hl
		ret
;
PUT_ENV_CHAR:	push	hl
		push	de
		ld	e,a
		ex	de,hl
		ld	a,(EV_PG##)
		pcall	GET_SEGMENT
		ex	de,hl
		call	WR_SEG##
		ei
		pop	de
		pop	hl
		ret
;
;
;------------------------------------------------------------------------------
;
	finish	<ENV>
	end
;
