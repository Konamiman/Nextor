	.z80
	title	MSX-DOS 2 ROM   Copyright (1986)  IS Systems Ltd.
	subttl	Mapper Initialisation
;-----------------------------------------------------------------------------
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
	INCLUDE	CONDASM.INC
;
P0_REG		equ	0FCh
P1_REG		equ	0FDh
P2_REG		equ	0FEh
P3_REG		equ	0FFh

MSXVER	equ	002Dh
;
;
;-----------------------------------------------------------------------------
;
MAP_INIT::
;
;    This routine initialises the mapper  support  code.   Note  that  it  is
; called before the mapper routines have been copied into page-3 RAM (that is
; done after this routine by "DOWNLOAD_CODE").  This whole routine runs  with
; interrupts disabled because of the dubious paging which it does.
;
;    First  it  runs  through  a  big loop which enables each slot in turn in
; page-2 and calls TEST_MAPPER_SLOT to see whether there is a  memory  mapper
; in  that slot or not.  For each mapper which it finds it allocates space in
; page-3 for an 8-byte mapper record for that mapper and fills it in.  If the
; newly located mapper has more memory than any previous one then the new one
; is recorded as the  primary  mapper  and  the  current  primary  mapper  is
; relegated  to  being  an extra mapper.  When the first mapper is found this
; will always replace the initial primary mapper (which  is  null)  and  this
; results  in a null mapper record being created which serves to mark the end
; of the list.
;
;    After trying each slot in this way, we check that the primary mapper has
; at  least 128k.  If the primary mapper slot is not the same as the original
; RAM slot (in page-3) then we call SWAP_RAM_SLOT  to  change  to  using  the
; primary  mapper  slot.   Next  we set up the various segment counts for the
; primary mapper, set up the paging variables, and then  enable  the  primary
; mapper  slot  into  page-2.   The  highest  numbered segment in the primary
; mapper is then recorded as the kernel data segment and this is  paged  into
; page-2 and initialized.
;
;    Finally we call SETUP_MAP_TBL for each mapper  in  turn,  including  the
; primary  mapper in order to set up the MAP_TBL pointers and segment list in
; page-2.  For the primary mapper, the first four segments and the  last  one
; (kernel data segment) are marked as allocated to the system.
;
; Entry:  A = current page-2 slot for MAP_SCAN.
;
;    *****  LOOP TO FIND MAPPERS AND BUILD UP TEMPORARY MAPPER RECORDS  *****
;

PROCNM	equ	0FD89h

if BUILTIN
		ld	(RAMAD2##),a
endif
		ld	b,a
		ld	a,(PROCNM+7)
		cp	1
		ld	a,b
		jr	nz,DO_MAPINIT

		ld	hl,ALL_SEG##
		ld	de,ALL_SEG##+1
		ld	bc,16*3-1
		ld	(hl),0C9h
		ldir
		xor	a
		ret
DO_MAPINIT:

		call	MAP_SCAN		;This is the second time round
		ret	c			; MAP_SCAN is called.
;
;
;    *****  ALLOCATE AND BUILD UP MAP_TAB IN PAGE-3  *****
;
		ex	de,hl
		ld	hl,MAP_REC##+2*16	;Calc the size of extra mapper
		sbc	hl,de			; record.
;
		add	hl,hl			;Allocate 8 bytes for each
		add	hl,hl			; mapper record + 1 byte for
		inc	hl			; null record.
		push	de
		call	ALLOC##
		pop	de
		ret	c
;
		ld	(MAP_TAB##),hl		;Store table pointer.
		ex	de,hl
fill_map_rec:	ld	a,(hl)			;Get total segments
		or	a
		jr	z,fill_null_rec
		inc	hl
		ldi				;Store mapper slot address
		ld	(de),a			;Store total segments
		inc	de
		ld	(de),a			;Also number of free segments
		inc	de
		xor	a
		ld	b,8-3
zero_map_rec:	ld	(de),a			;Zero the remainder of the
		inc	de			; record.
		djnz	zero_map_rec
		jr	fill_map_rec
;
fill_null_rec:	ld	(de),a
;
;
;    *****  SETUP PRIMARY MAPPER AND CREATE KERNEL DATA SEGMENT  *****
;
		ld	hl,(MAP_TAB##)
		ld	a,(hl)
		push	hl
		ld	(RAMAD3##),a		;Record all the RAM slots as

if NOT BUILTIN
		ld	(RAMAD2##),a		; the primary mapper slot and
endif
		ld	(RAMAD1##),a		; enable the mapper slot in
		ld	(RAMAD0##),a		; page-2.
		ld	h,80h
		call	ENASLT##
		pop	hl
;
		inc	hl
		ld	a,(hl)

if (BUILTIN AND STURBO)
		ld	b,a
		ld	a,(MSXVER)
		cp	3
		ld	a,b
		jr	nz,NOTR2
		ld	b,a
		ld	a,(BOOTKEYS##)
		and	00010000b   ;4 key pressed?
		ld	a,b
		jr	nz,NOTR2
		sub	4

		;bit	2,a
		;jr	z,not_super_turbo
		;add	a,4
		;ld	(hl),a
not_super_turbo:
		;sub	4			;
NOTR2:
endif
		dec	a			;Record the last segment number
		ld	(DATA_SEG##),a		; as the kernel data segment.
		dec	a			;Record the next segment number
		ld	(CODE_SEG##),a		; as the kernel code segment.

		;ld	b,a
		;ld	a,(MSXVER)
		;cp	3
		;ld	a,b
		;jr	z,ISTR3

		sub	4
ISTR3:

		inc	hl
		ld	(hl),a			;Record number of free segments
		inc	hl

if (BUILTIN AND STURBO)
		ld	a,(BOOTKEYS##)
		and	00010000b
		ld	a,6
		jr	nz,SYSSEGSCOUNT

		ld	a,(MSXVER)
		cp	3
		ld	a,6+4
		jr	z,SYSSEGSCOUNT
		ld	a,6
SYSSEGSCOUNT:
		ld	(hl),a

;		;ld	(hl),6+4		;Record ten system segment
else
		ld	(hl),6			;Record six system segment
endif
;
		ld	de,P0_64K##
		ld	hl,P0_SEG##		;Record the first four segment
		ld	a,3			; numbers (0,1,2,3) as the
seg_64k_loop:	ld	(de),a			; basic 64k and also as the
		inc	de			; current four segments.
		ld	(hl),a
		inc	hl
		dec	a
		jp	p,seg_64k_loop
;
		ld	a,(DATA_SEG##)		;Page kernel data segment
		out	(P2_REG),a		; into page-2.
;
		ld	hl,VAR_TOP##-1		;zero the whole of the kernel
zero_p2_loop:	ld	(hl),0			; data segment up to the
		dec	hl			; reserved bit at the top.
		bit	7,h
		jr	nz,zero_p2_loop
;
		ld	hl,VAR_BOT##		;Set up the RAM chain pointer
		ld	(RAM_PTR##),hl		; to point to an end of chain
						; marker at the bottom of all
						; the fixed variables.
		ld	hl,0
		ld	(MHANDLES##),hl
		ld	(MHANDLES##+2),hl
		ld	(MHANDLES##+4),hl
		ld	(MHANDLES##+6),hl
		ld	a,h
		ld	(RW_LEVEL##),a
		ld	(BF_LEVEL##),a
;
;
;    *****  SETUP MAP_TBL AND SEGMENT LISTS IN PAGE-2  *****
;
		ld	hl,(MAP_TAB##)
		ld	a,(hl)
		inc	hl			;Setup MAP_TBL entry and
		push	hl			; segment list for primary
		call	SETUP_MAP_TBL		; mapper.

if (BUILTIN AND STURBO)
		ld	a,(MSXVER)
		cp	3
		jr	nz,NOTURBOR

		;ld	d,a
		ld	a,(BOOTKEYS##)
		and	00010000b
		;ld	a,d	                ;On Turbo-R, the "4" key causes
		jr	nz,NOTURBOR         ;the bigger mapper to be used as primary

		dec	hl			;Always mark last 4
		dec	(hl)		; segments as allocated
		dec	hl			; to system.
		dec	(hl)
		dec	hl
		dec	(hl)
		dec	hl
		dec	(hl)
NOTURBOR:
endif
		dec	hl			;Mark kernel data seg as
		dec	(hl)			; allocated to system.
		dec	hl			;Mark kernel code seg as
		dec	(hl)			; allocated to system.
		ex	de,hl
		ld	b,4
alloc_64k_loop:	dec	(hl)			;Also mark first 4 segments
		inc	hl			; as allocated to the system.
		djnz	alloc_64k_loop
;
		pop	hl
		ld	bc,7
		add	hl,bc
;
ext_map_loop:	ld	a,(hl)			;Now loop to set up MAP_TBL
		or	a			; pointers and segment list
		jr	z,ext_map_end		; for any extra mappers which
		inc	hl			; are in the system.
		push	hl
		call	SETUP_MAP_TBL
		pop	hl
		ld	bc,7
		add	hl,bc
		jr	ext_map_loop
ext_map_end:
		ld	a,1			;Select segment-1
		out	(P2_REG),a
		or	a			;Return carry clear => success
		ret
;
;
;-----------------------------------------------------------------------------
;
MAP_SCAN::
;
; We divided the MAP_INIT routine into two sections.  MAP_SCAN is called first
; just to verify whether the enough mapper memory is available.   If  memories
; are  not  available,  MSX-DOS2 will not attempt to initialize itself so that
; other cartridges such as DOS1 can start up.  This call is  made  before  the
; fixed disk system work area is allocated, so MAP_SCAN cannot reference these
; locations.
;
; Entry:  A = current page-2 slot.
;
;    *****  LOOP TO FIND MAPPERS AND BUILD UP TEMPORARY MAPPER RECORDS  *****
;
		di				;Remember current page-2 slot
		push	af			; for fail safe.
;
		ld	hl,MAP_REC##+2*16	;MAP_REC grows downward.
		xor	a
		ld	(hl),a			;No primary mapper yet.
		push	hl
;
		ld	hl,EXPTBL##
pri_slot_loop:	bit	7,(hl)			;Set expanded slot flag in A
		jr	z,not_exp_slot		; if this slot is expanded.
		set	7,a
not_exp_slot:
sec_slot_loop:	push	hl
		push	af			;Enable the slot under
		ld	h,80h			; question into page-2 and
		call	ENASLT##		; find out if it contains a
		call	TEST_MAPPER_SLOT	; mapper or not.
		or	a
		jr	z,no_mapper		;Skip if not a mapper slot
;
		pop	bc			;B = slot number
;
		pop	hl
		ex	(sp),hl			;HL -> mapper record
;
		push	bc
		ld	c,a			;If this mapper has more RAM
		ld	a,(MSXVER)
		cp	3
		ld	a,(hl)			; than current primary one then
		jr	nz,NO_PRIM_INTERNAL

		ld	d,a
		ld	a,(BOOTKEYS##)
		and	00010000b
		ld	a,d					;On Turbo-R, the "4" key causes
		jr	nz,NO_PRIM_INTERNAL	;the bigger mapper to be used as primary

if BUILTIN
		or	a
		jr	z,not_primary		;Found one, no primary yet.
		ld	a,b
		dec	a			;Internal slot (0,3) ==> 2
		and	10b			;External slot (1,2) ==> 0
		ld	b,a
		inc	hl
		ld	a,(hl)
		dec	hl
		dec	a
		and	10b
		cp	b
		ld	a,c
		pop	bc
		push	bc
		ld	c,a
		ld	a,(hl)
		jr	c,not_primary		;Found internal slot
						; and current is external.
		jr	nz,is_primary		;Found external slot
						; and current is internal.
endif
NO_PRIM_INTERNAL:
		cp	c			; swap this slot & segment
		jr	c,not_primary		; count with the primary

if BUILTIN
is_primary:
endif
		ld	(hl),c			; mapper.
		ld	c,a
		inc	hl
		ld	a,(hl)
		ld	(hl),b
		ld	b,a
		dec	hl
not_primary:
		dec	hl
		ld	(hl),b			;Save mapper slot address
		dec	hl
		ld	(hl),c			;Save total segments
;
		pop	bc
		ex	(sp),hl
		push	hl
		push	bc
;
no_mapper:	pop	af			;Get current slot back
		pop	hl
		bit	7,a
		jr	z,not_exp_slot_2	;If it is an expanded slot
		add	a,4			; then step on to next
		bit	4,a			; secondary slot and loop
		jr	z,sec_slot_loop		; back if not last one.
not_exp_slot_2:	inc	hl
		inc	a			;Step onto next primary slot
		and	03h			; and loop back if not done
		jr	nz,pri_slot_loop	; the last one.
;
		pop	hl			;HL -> mapper record
		pop	af
;
		push	hl			;Restore page-2 slot
		ld	h,80h			; in case mapper RAM was
		call	ENASLT##		; not available.
		pop	hl
;
		ld	a,(hl)			;Return an error if we don't
		cp	6			; have a primary mapper with
		ret	c			; at least 6 segments (96k).
;
		push	hl
		inc	hl
		call	SWAP_RAM_SLOT		; the RAM slot.
		pop	hl
		xor	a
		ret
;
;
;------------------------------------------------------------------------------
;
TEST_MAPPER_SLOT:
;
;    This routine is called for each slot in the system to test  whether  the
; slot  contains  a  mapper or not and if so then find out how much memory it
; contains.  The slot will be enabled in page-2 and so this routine does  not
; need to know which slot it is testing.
;
;   First it does a simple test to see whether there is a mapper  present  in
; the  slot.   This  involves  writing  AAh to a byte in segment 1, paging in
; segment zero and writing a 55h  at  the  same  address  and  then  checking
; whether the AAh is still there in segment 1.  The old values of these bytes
; are preserved while doing this.
;
;   Assuming that a mapper does exist we then must work out how many segments
; it  contains.   This  is done by a similar process involving writing to the
; first byte of each segment.  First the first byte of each segment is set to
; AAh,  while  saving  the previous value.  Then we look through each segment
; starting from zero checking that the AAh is still there, replacing it  with
; a 55h and making sure that the 55h writes OK.  When we find a segment which
; fails this indicates  that  we  have  reached  the  end  of  mapper  memory
; (probably  with  a  segment  reflecting  segment  zero).  This tells us the
; number of segments.  Finally we restore the original  first  byte  of  each
; segment.
;
; Entry:     None
; Returns:   A = Number of segments (0 => not a valid mapper slot)
; Corrupts:  AF,BC,DE,HL
;
;
		ld	hl,8000h		;Set 1st byte of segment 1
		ld	b,(hl)			; to 0AAh, remembering its
		ld	(hl),0AAh		; previous contents.
		xor	a
		out	(P2_REG),a		;Now set 1st byte of segment
		ld	c,(hl)			; 0 to 055h, remembering its
		ld	(hl),055h		; previous contents.
		inc	a
		out	(P2_REG),a		;Now see what is now in segment
		ld	e,(hl)			; 1 (should be AAh).
		xor	a
		out	(P2_REG),a		;Restore original byte of
		ld	(hl),c			; segment 0.
		inc	a
		out	(P2_REG),a		;Restore original byte of
		ld	(hl),b			; segment 1.
		ld	a,e			;If the 0AAh survived in
		cp	0AAh			; segment 1 then we have a
		ld	b,0			; mapper.  Jump to return
		jr	nz,not_mapper		; zero if not.
;
		ld	hl,08000h
		ld	b,0			;Look through each segment
pass_1_loop:	ld	a,b			; in turn from 00h to FFh,
		out	(P2_REG),a		; saving the first byte on
		ld	a,(hl)			; the stack and replacing it
		push	af			; with a 0AAh.
		inc	sp
		ld	(hl),0AAh
		inc	b
		jr	nz,pass_1_loop		;Always exits with B=0
;
pass_2_loop:	ld	a,b			;Now look at each segment
		out	(P2_REG),a		; again and if the first byte
		ld	a,(hl)			; is still 0AAh, replace it
		cp	0AAh			; with 055h, making sure that
		jr	nz,end_of_segs		; the 055h writes correctly.
		ld	a,055h			;If it is not 0AAh, or if the
		ld	(hl),a			; 055h didn't write correctly
		cp	(hl)			; then this is not a valid
		jr	nz,end_of_segs		; RAM segment so exit with
		inc	b			; B = number of segments.
		jr	nz,pass_2_loop
		dec	b			;Maximum segments is 255
end_of_segs:
;
		ld	c,0			;Now restore the original byte
pass_3_loop:	ld	a,c			; to each of the 256 segments.
		dec	a
		out	(P2_REG),a
		dec	sp
		pop	af
		ld	(hl),a
		dec	c
		jr	nz,pass_3_loop
;
not_mapper:	ld	a,1			;Make sure segment-1 is still
		out	(P2_REG),a		; selected in page-2
		ld	a,b
		ret
;
;
;-----------------------------------------------------------------------------
;
SWAP_RAM_SLOT:
;
;   This routine is called when the selected primary mapper slot is  not  the
; same as the current page-3 RAM slot.  It copies the whole of the page-3 RAM
; segment  into  segment  zero  of the new mapper slot, and then enables this
; slot into page-3.  After this if the new mapper slot is expanded  then  its
; secondary  slot  register image variable must be set up correctly.  This is
; because the ENASLT routine will (may?) have only updated the image variable
; in  the  old  page-3  RAM segment and we must make sure that the new one is
; correct.
;
;
; Entry:    (HL) = Required mapper RAM slot address
;
;
		ld	a,(hl)
		push	af			;Remember the new mapper slot.
;
		ld	h,80h			;Enable the required mapper
		call	ENASLT##		; slot into page-2 and then
		xor	a			; page segment zero of this
		out	(P2_REG),a		; slot into page-2.
;
		ld	hl,0			;Copy (SP)~FFFFh of page-3
		sbc	hl,sp			; RAM from the old slot to the
		ld	c,l			; new mapper slot in page-2.
		ld	b,h
		ld	hl,0
		add	hl,sp
		ld	e,l
		ld	d,h
		res	6,d
		ldir
;
		out	(P3_REG),a
		inc	a			;Select the original segment
		out	(P2_REG),a		; in page-2.
		inc	a
		out	(P1_REG),a
		inc	a
		out	(P0_REG),a
;
		pop	af
		ld	hl,0			;Save current stack pointer
		add	hl,sp			; in page-3 and set temporary
		ld	sp,0C000h		; stack in page-2.
		push	af
		push	hl			;Now page the new mapper slot
		call	ENASLT##		; into page-3.
		pop	hl
		pop	af
		ld	sp,hl
;
		bit	7,a			;If the new mapper slot is
		jr	z,no_exp_fix		; expanded then read its
		and	03h			; secondary slot register
		ld	c,a			; in and store it in the
		ld	b,0			; appropriate image variable.
		ld	hl,SLTTBL##		; This is because ENASLT will
		add	hl,bc			; have updated the image
		ld	a,(0FFFFh)		; variable only in the old
		cpl				; RAM segment.
		ld	(hl),a
no_exp_fix:
		ret
;
;
;-----------------------------------------------------------------------------
;
SETUP_MAP_TBL:
;
;   This  routine  is  called in order to set up the MAP_TBL pointers and the
; segment list in the kernel data segment for a particular mapper.  The  slot
; address  is  used to find the correct entry in MAP_TBL and the two pointers
; in here set up (one to point to the segment counts in page-3 and one to the
; segment  list  in  page-2).  The space for the segment list is allocated by
; moving RAM_PTR downwards.  This memory will already be zero so the  segment
; list  does  not  need to be initialized.  The pointers are returned just to
; make the reservation of segments for the primary mapper slot easier.
;
;
; Entry:     A  =  Slot address of mapper
;	     HL -> counters for this slot
; Returns:   DE -> first byte of segment list
;	     HL -> byte after last byte of segment list
; Corrupts:  AF,BC,DE,HL
;
		ex	de,hl			;DE -> segment counts
		and	00001111b
		add	a,a			;Multiply slot number by 4
		add	a,a			; to get offset from start of
		ld	c,a			; MAP_TBL and add this base
		ld	b,0			; on to get HL -> correct
		ld	hl,MAP_TBL##		; entry in MAP_TBL.
		add	hl,bc
		ld	(hl),e			;Store the segment counts
		inc	hl			; pointer in MAP_TBL.
		ld	(hl),d
		inc	hl
;
		ex	de,hl
		ld	c,(hl)			;BC = total segments.
		ld	b,0
		ld	hl,(RAM_PTR##)		;Adjust the RAM pointer down
		or	a			; by enough to reserve space
		sbc	hl,bc			; for the segment list.
		ld	(RAM_PTR##),hl
		inc	hl			;Leave the null "end of chain"
		inc	hl			; pointer.
		ex	de,hl
		ld	(hl),e			;Store pointer to segment list
		inc	hl			; in MAP_TBL.
		ld	(hl),d
;
		ld	h,d
		ld	l,e			;Return with:
		add	hl,bc			; HL -> end of segment list
		ret				; DE -> start of segment list
;
;
;==============================================================================
;
MAP_DEV 	equ	04h			;Device code of Mapper Support
;
MAPBIO::
;
;   This routine  hooks the Extended BIOS  entry at FFCAh and supports various
; kind of mapper support MSX Extended BIOS functions.
;
;   D = 0 (Broadcast)
;	E = 0   Build device number table
;
;   D = 4 (Mapper device)
;	E = 0   Build device table
;	E = 1   Return Mapper record
;	E = 2   Return Vector address
;
;   For other values of D, the EXTBIO hook on the driver bank is called with D'=1.
;   This must return D'=1 if old hook must be called, D'=0 otherwise.

		exx
		set	0,d
		exx
		ld	ix,DV_EXTBIO##
		ex	af,af'
		ld	a,DV_BANK##
		call	DH_CABNK##
		exx
		bit	0,d
		exx
		jr	nz,MAPBIO2
		ret
MAPBIO2:

		call	EXB_NEX
		exx
		ex	af,af'
		bit	0,d
		exx
		jr	nz,MAPBIO22
		ex	af,af'
		ret
MAPBIO22:
		ex	af,af'

		push	af	;Dont call system handler if running DOS 1
		ld	a,(DOS_VER##)
		or	a
		jr	nz,MAPBIO3
		pop	af
		ret

MAPBIO3:
		pop	af

		;Need to push EXACTLY these registers and in this order,
		;since CHK_DEV changes the pushed values
		exx
		set	0,d
		exx
		push	de
		push	af
		call	CHK_DEV
        exx
        ex af,af'
        bit 0,d
        jr z,MAPB_DONT_CALL_OLD

        ex af,af'   ;D'=0 at return: must call old hook with original registers
        exx    
		pop	af
		pop	de
		ret

MAPB_DONT_CALL_OLD:
        pop af      ;D'=1 at return: don't call old hook, keep returned registers
        pop af
        ex af,af'
        exx
        ret
;

EXB_NEX:
;
;   Call the EXTBIO routine of Nextor kernels other than the master one
;   Out: D'=1 if system hook must be called, 0 otherwise
;
	exx
	ex	af,af'
	ld	hl,EXB_RAM
	ld	de,($SECBUF##)
	ld	bc,EXB_RAM_END-EXB_RAM
	ldir
	ex	af,af'
	exx
	ld	ix,($SECBUF##)
	jp	(ix)

	;--- From here is copied to RAM
EXB_RAM:
	ld	ix,KERNEX##
	ld	iy,0400h
EXB_LOOP:
	exx
	ex	af,af'
	ld	a,(ix)
	or a	;Zero if empty entry
	jr	z,EXB_DJNZ
    and 10001111b    
	ld	c,a
	ld	a,(MASTER_SLOT##)
	cp	c
	jr	z,EXB_DJNZ	;Skip master kernel as we have processed it already

	push	ix
	push	iy
	ex	af,af'
	exx
	push	af
	push	bc
	push	de
	push	hl
    ld a,(ix)
    and 10001111b
   	ld	h,40h
	call	ENASLT
	ld	hl,DV_EXTBIO##
	ld (BK4_ADD##),hl
	exx
	ld	de,0100h    ;Pass D'=1 by default
	exx
	pop	hl
	pop	de
	pop	bc
	pop	af
	call	CALDRV##

	pop	iy
	pop	ix
	exx
	ex	af,af'
	bit	0,d
	jr	z,EXB_RAM_FIN

EXB_DJNZ:
	push	iy
	pop	af
	dec	a
	jr	z,EXB_RAM_FIN
	push	af
	pop	iy
	inc	ix
	ex	af,af'
	exx
	jr	EXB_LOOP

EXB_RAM_FIN:
    set 0,d     ;System hook must be called
	ex	af,af'
	exx
	push	af
	push	bc
	push	de
	push	hl
	ld	a,(MASTER_SLOT##)
	ld	h,40h
	call	ENASLT
	pop	hl
	pop	de
	pop	bc
	pop	af
	ret
EXB_RAM_END:
	;--- Up to here is copied to RAM


CHK_DEV:	ld	a,d
		or	e
		jr	nz,CHK_UNAPI
;
BROADCAST_BIO:	ld	a,MAP_DEV	;Build device number table function.
		call	EXTWRT		;+0 set our device number
		call	EXTWRT		;+1 reserved field
        jp RESET_EXX_D
;
CHK_UNAPI:
        ld  a,d
        cp  22h
        jr  nz,CHK_MAPDEV
        ld  a,e
        cp  22h
        jr  nz,CHK_MAPDEV

        ld  a,h
        or  l
        ret nz

        pop de
        pop af
        cp 0FFh
        push af
        push de
        ld de,2222h
        ret nz

        ld hl,MAP_VECT##+30h
        ld bc,0
        ld a,4  ;Number of RAM helper compatible routines
        jp  RESET_EXX_D

CHK_MAPDEV:	ld	a,d
		cp	MAP_DEV		;Mapper device?
		ret	nz
;
		ld	a,e
		or	a
		jr	z,MAPBIO_0	;Build table function
		dec	a
		jr	z,MAPBIO_1	;Return mapper record function
		dec	a
		jr	z,MAPBIO_2	;Return vector address function
		ret
;
MAPBIO_0:	push	hl		;Build table function.
		ld	hl,(MAP_TAB##)
		ld	c,(hl)		;C = primary mapper slot
	 	inc	hl
		ld	d,(hl)		;D = number of primary mapper segments
		inc	hl
		ld	e,(hl)		;E = number of free segments
		pop	hl
;
		ld	a,c
		call	EXTWRT		;+0 set mapper RAM slot
		ld	a,low(MAP_VECT##)
		call	EXTWRT		;+1 set mapper support entry (low)
		ld	a,high(MAP_VECT##)
		call	EXTWRT		;+2 set mapper support entry (high)
		ld	a,e
		call	EXTWRT		;+3 set number of free segments
		ld	a,d
		call	EXTWRT		;+4 set number of available segments
		call	EXTWRT		;+5 reserved field
		call	EXTWRT		;+6 reserved field
		call	EXTWRT		;+7 reserved field
        jp RESET_EXX_D
;
MAPBIO_1:	pop	de
		pop	af		;Pop off saved AF
		ld	hl,(MAP_TAB##)
		ld	a,(hl)
		push	af
		push	de
		jp RESET_EXX_D
;
MAPBIO_2:	pop	de
		pop	af		;Pop off saved AF
		ld	hl,(MAP_TAB##)
		ld	b,(hl)		;B = primary mapper slot
		inc	hl
		ld	a,(hl)		;A = number of available segments
		inc	hl
		ld	c,(hl)		;C = number of free segments
		ld	hl,MAP_VECT##	;HL = address of jump vector
		push	af
		push	de
		jp RESET_EXX_D
;
;	Fill the table entry B:HL with [A], then advance HL.
;
EXTWRT:		push	bc
		push	de
		ld	e,a		;Set data to write
		ld	a,b		;Set slot address of table
		call	WRSLT##		;Fill [HL] with [E], HL is preserved
		pop	de
		pop	bc
		inc	hl
		xor	a
		ret

RESET_EXX_D:
    exx
    res 0,d
    exx
    ret


; Returns NZ for superturbo mode, Z otherwise

IS_SUPER_TURBO:
	ld	a,(MSXVER)
	cp	3
	ret

	push	hl
	ld	hl,(MAP_TAB##)
	inc	hl
	bit	2,(hl)
	pop	hl
	ret

;
;-----------------------------------------------------------------------------
;
	finish	<MAPINIT>
	end
;
