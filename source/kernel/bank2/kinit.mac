	.z80
	title	MSX-DOS 2 KERNEL   Copyright (1986)  IS Systems Ltd.
	subttl	Main Kernel Initialisation Section
;******************************************************************************
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
	RAMMOD
;
;-----------------------------------------------------------------------------
;
;    This module must be the first module of the kernel, so that it starts  at
; address  0000h.   It  starts  of  with  a  series  of jumps to slot handling
; routines.  These routines  are  functionally  identical  to  the  equivalent
; routines in the BIOS ROM, and are located in page-3 system RAM.
;
rom_st:
;
	jp	KINIT			;Entry from DOSINIT
;
	ds	05h-($-rom_st),0	;Fixed BDOS entry point, at 0005h
	jp	KBDOS			; just for the sake of it.
;
	ds	0Ch-($-rom_st),0	;Read a byte from a slot
	jp	$RDSLT##
;
	ds	14h-($-rom_st),0	;Write a byte to a slot
	jp	$WRSLT##
;
	ds	1Ch-($-rom_st),0	;Inter-slot call (address in IYh:IX)
	jp	$CALSLT##
;
	ds	24h-($-rom_st),0	;Enable slot permanently
	jp	$ENASLT##
;
	ds	28h-($-rom_st),0	;Breakpoint for MZED
	jp	0C206h
;
	ds	30h-($-rom_st),0	;Inter-slot call (address in code)
	jp	$CALLF##
;
	ds	38h-($-rom_st),0	;Interrupt entry point
	jp	$IRQ##
;
;
;	--------------------------------
;
;   Following  is  the  secondary  slot switching routine which is the same as
; that contained in the MSX-DOS page-0 TPA segment, at the same addresses. The
; entry  points  for  these  routines  are defined in the "DATA" module to get
; around relocation problems.
;
SLOT_REG	equ	0A8h
;
;SSLOT::
		out	(SLOT_REG),a
		ld	a,(0FFFFh)	;Get current secondary slot
		cpl			; register.
		ld	l,a		;Save it in L for return
		and	h		;Mask out old value
		or	d		;Insert new value
		jr	wr_secondary
;SSLOTL::
		out	(SLOT_REG),a
		ld	a,l		;Get secondary slot regsiter
		jr	wr_secondary	; setting from L.
;SSLOTE::
		out	(SLOT_REG),a
		ld	a,e		;Get value from E.
;
wr_secondary:	ld	(0FFFFh),a	;Write out new value
		ld	a,b
		out	(SLOT_REG),a	;Restore original primary
		ret			; slot select register.
;
;
;	--------------------------------
;
	ds	5Ch-($-rom_st),0
;
	jp	?ALL_SEG## -OFFSET	;Entry jumps to the mapper
	jp	?FRE_SEG## -OFFSET	; allocation routines.
;
;
;	--------------------------------
;
	ds	80h-($-rom_st),0	;Pad up to 80h for BIOS entry
;
	jp	?KCONIN##  -OFFSET	;Entry jumps to the kernel
	jp	?KCONOUT## -OFFSET	; BIOS routines.
	jp	?KCONST##  -OFFSET
	jp	?KLST##    -OFFSET
	jp	?KLSTST##  -OFFSET
	jp	?KPUNCH##  -OFFSET
	jp	?KREADER## -OFFSET
;
;
;******************************************************************************
;
	PROC	KINIT
;
;   This is the main RAM base  part  of  the  kernel  initialisation.   It  is
; entered with the slot selection and paging as follows:
;
;		page-0 - RAM slot - Kernel code segment (this code)
;		page-1 - Master disk ROM slot
;		page-2 - RAM slot - Kernel data segment
;		page-3 - RAM slot - System page-3 segment
;
;    It sets up all of the kernel data structures in the kernel  RAM  segment.
; This  includes  allocating  and setting up unit descriptors and linking them
; with the DPB's in system RAM.  Sector buffers are also allocated and set  up
; here.  It is passed the address of the RAMDISK DPB in HL.
;
; On error, returns Cy=1 and A=error code starting at 4.
;
		ld	iy,RAM_BASE##		;Setup IY for addressability
;
;	+++++  SETUP RAMDISK UNIT DESCRIPTOR  +++++
;
		ld	de,RM_DPB##		;Get address of DPB pointer
		ld	bc,(MASTER_SLOT##)	;C := RAM disk slot number
		ld	l,80h			;D := offset to entry table
		ld	b,1			;Only one unit.
		call	INIT_UNITS		;Create a unit descriptor
		ld	a,4
		jr	nz,kinit_fail_nz	; for the RAM disk.
;
;	+++++  SETUP UNIT DESCRIPTORS FOR ALL DRIVES  +++++
;
		ld	hl,DRVTBL##		;Point to disk driver table
		ld	de,$DPBLIST##		;Point to DPB table
		ld	b,4			;B=loop count
init_drv_loop:	ld	a,(hl)			;A := number of drives
		inc	hl			;     in this slot.
		ld	c,(hl)			;C := Slot number
		inc	hl
		or	a			;Set Z-flag if no drives
		push	hl
		push	bc
		ld	b,a			;B := number of units
		ld	l,10h			;L := offset to entry table
		call	nz,INIT_UNITS		;Create the unit descriptors
		pop	bc			; unless there are none.
		pop	hl
		ld	a,5
		jr	nz,kinit_fail_nz	;Give up if no more RAM
		djnz	init_drv_loop		;Loop back for next driver
;
		ld	d,b			;Initialise ASG_TAB to assign
		pcall	F_ASSIGN		; each unit to itself.


;	+++++  INITIALIZE UNIT DESCRIPTORS FOR DEVICE-BASED DRIVERS  +++++

		push	iy
		ex	af,af'
		ld	a,4
		ld	ix,AUTODRV##
		call	CALBNK##
		pop	iy

;
;	+++++  SETUP DEVICE DESCRIPTOR CHAIN  +++++
;
		ld	hl,DEV_LIST
link_dev_loop:	ld	a,(hl)			;Look at next device
		or	a			; and exit loop if zero
		jr	z,link_dev_done		; (end of list).
		inc	hl
;
		push	hl
		ld	hl,DD_SZ##		;Allocate RAM for another
		call	ALL_P2			; device descriptor and
		pop	de			; die if not enough memory.
		ld	a,6
kinit_fail_nz:	jr	nz,kinit_fail
		ld	bc,(DEV_CHAIN##)
		ld	(DEV_CHAIN##),hl	;Link it into chain.
		ld	(hl),c
		inc	hl
		ld	(hl),b
		inc	hl
		ex	de,hl
		ldi				;Copy address of device
		ldi				; handler into descriptor.
		ex	de,hl
		ld	bc,DD_MODE##-(DD_NEXT##+4) ;Copy the device flags and
		add	hl,bc			   ; device name into the
		ex	de,hl			   ; device descriptor.
		ld	bc,1+8+3
		ldir
		ld	a,ATM_DEV		;Insert an attribute byte to
		ld	(de),a			; indicate that it is a device
		ld	b,32-(8+3+1)		; directory entry.
		xor	a
clr_dd_loop:	inc	de			;Fill up the rest of the entry
		ld	(de),a			; with nulls (date time etc).
		djnz	clr_dd_loop
		jr	link_dev_loop		;Loop back for next one.
;
link_dev_done:
;
;	+++++  SETUP SECTOR BUFFER CHAIN  +++++
;
		ld	b,DEF_BUFS##		;Allocate the default number
		pcall	F_BUFFER		; of sector buffers.
;
;	+++++  INITIALISE FILE HANDLE SYSTEM  +++++
;
		ld	b,0			;Setup file handles and
		pcall	F_JOIN			; file access blocks.
;
;	+++++  INITIALISE RAM DISK +++++
;
		push	iy			;Just kill the RAMdisk boot sector.
		ex	af,af'
		ld	a,4
		ld	ix,ZAP_RAMD##
		call	CALBNK##
		pop	iy
;
;	+++++  INITIALISE BIOS CHARACTER I/O VARIABLES  +++++
;
		pcall	CHAR_INIT
		ld	hl,CURSOR_SEQS		;Copy cursor on and off
		ld	de,CH_BUF##-6		; escape sequences to start
		ld	bc,6			; of BIOS screen buffer.
		ldir
;
		ld	a,1			;Initialise console status
		ld	(ST_COUNT##),a		; check counter.
;
;
;	+++++  INITIALISE CP/M FILE FUNCTIONS  +++++
;
		ld	(iy+@BUF_UNIT##),0FFh	;Nothing in file buffer
;

		push	iy
		ex	af,af'
		ld	a,4
		ld	ix,CLK_INIT##
		call	CALBNK##
		pop	iy
		;pcall	CLK_INIT		;Initialise clock chip
;
		or	a			;Return with carry clear to
		ret				; indicate success.
;
;
kinit_fail:	scf				;Return a fatal error if
		ret				; anything went wrong with
						; initialisation.
;
;
;	----------------------------------------
;
DEV_LIST:	db	0FFh				;List of devices for
		dw	?DEV_CON##-OFFSET		; setting up the
		db	10100011b, "CON     ","   "	; descriptor chain.
;
		db	0FFh
		dw	?DEV_LST##-OFFSET
		db	10100000b, "LST     ","   "
;
		db	0FFh
		dw	?DEV_LST##-OFFSET
		db	10100000b, "PRN     ","   "
;
		db	0FFh
		dw	?DEV_NUL##-OFFSET
		db	10100000b, "NUL     ","   "
;
		db	0FFh
		dw	?DEV_AUX##-OFFSET
		db	10100000b, "AUX     ","   "
;
		db	0
;
;
CURSOR_SEQS:	db	ESC,"y5"		;Cursor on sequence
		db	ESC,"x5"		;Cursor off sequence
;
;
;------------------------------------------------------------------------------
;
INIT_UNITS:
;
;   This routine creates and  initialises  all  the  unit  descriptors  for  a
; particular disk driver (including the RAM disk). A pointer to the MSX DPB is
; put in the unit descriptor.  The unit descriptor has its UD_SLOT, UD_OFFSET,
; UD_DPB,  UD_REL and UD_PHYS fields set up and UD_CDIR is set -ve to indicate
; the root directory.  The rest of the unit descriptor is zeroed.   A  pointer
; to  the unit descriptor is store in the appropriate place in UNIT_TAB unless
; it is the RAM unit being initialised (physical unit zero) in which  case  it
; is  stored  in the variable RM_UD.  The physical unit number (less one) must
; be set up in the MSX DPB.
;
; Entry:       DE = Address of array of pointers to the MSX DPBs
;		C = Slot address of the disk driver
;		L = Offset of entry table from 4000h in that slot
;		B = Number of units required
; Returns:     Z-flag set (and A=0) if succesful.
;		      cler (and A<>0) if insufficient memory
;	       HL = Pointer to next entry in DPB pointer array (if A=0)
; Corrupts:    AF,BC,DE,HL,IX,AF'
;
		xor	a			;Start at relative unit 0
init_unit_loop:	ex	af,af'
		push	hl			;Save entry table offset
;
		ld	hl,UD_SZ##		;Allocate RAM for a unit
		call	ALL_P2			; descriptor.
		jr	nz,init_unit_fail	;Error if not enough RAM.
		ex	de,hl			;Get UD address into DE and
		push	de			; IX, and DPB address pointer
		pop	ix			; into HL.
;
		push	bc			;Save loop count & slot
		ld	c,(hl)
		inc	hl			;Get DPB address and adjust
		ld	b,(hl)			; pointer for next one.
		inc	hl
		push	hl			;Save new DPB pointer address
		ld	(ix+UD_DPB##),c		;Store a pointer to the DPB
		ld	(ix+UD_DPB##+1),b	; in the unit descriptor.
;
		ld	a,(bc)			;Get physical unit number
		inc	a			; from DPB and store it in
		ld	(ix+UD_PHYS##),a	; unit descriptor after
		ld	l,a			; adjusting it.
		ld	h,0			;HL := unit number (1...8)
;
		inc	bc			;Get media descriptor from
		ld	a,(bc)			; DPB and store it in the
		ld	(ix+UD_MBYTE##),a	; unit descriptor.
;
		ld	bc,RM_UD##		;If physical unit is non-zero
		jr	z,init_ramunit		; (ie. not RAM disk) then
		ld	bc,UNIT_TAB##		; find the correct entry in
init_ramunit:	add	hl,hl			; UNIT_TAB depending on the
		add	hl,bc			; physical unit number.
		ld	(hl),e			;Store a pointer to the unit
		inc	hl			; descriptor in UNIT_TAB, or
		ld	(hl),d			; at RM_UD if it is the RAM
						; disk unit.
;
		pop	de			;Restore next DPB addr pointer
		pop	bc			;Restore loop count & slot
		pop	hl			;Restore entry table offset
		ld	(ix+UD_SLOT##),c	;Store slot number
		ld	(ix+UD_OFFSET##),l	;  ..  entry table offset
;
		ex	af,af'
		ld	(ix+UD_REL##),a		;Store relative unit number
		inc	a			; and increment for next time.
		ld	(ix+UD_CDIR##+1),0FFh	;set current dir -ve => root
		ld	(ix+UD_CDIR##),0FFh
;
		ld	(ix+UD_SEG##),0FFh
		djnz	init_unit_loop		;Loop for next unit
		xor	a
		ret				;Return with no error
;
;
init_unit_fail:	pop	hl			;Return with error if not
		ret				; enough memory.
;
;
;******************************************************************************
;
	PROC	ALL_P2
;
;    This routine attempts to allocate a block of page-2 RAM  of  a  specified
; size  and returns a pointer to it.  If insufficient memory is available then
; it returns with an error.  If successful then  the  allocated  RAM  will  be
; zeroed  before  returning.   It  first looks down the free chain for a large
; enough block, using a first fit algorithm, and if that fails, tries to  move
; "RAM_PTR" down to use more of the segment.
;
; Entry:      HL = Size of RAM required (must not be zero).
; Returns:     A = 0 (and Z-flag set) => success, HL = address of RAM
;	       A <>0 (and Z-flag clear) => error,  A = error code.
; Corrupts:   AF,HL
;
		push	de
		push	bc
		inc	hl			;Round the request up to
		res	0,l			; an even number of bytes
		ld	b,h			; and put the value in BC.
		ld	c,l
;
		ld	hl,(RAM_PTR##)		;Point to start of chain
fr_chain_loop:	ld	e,(hl)
		inc	hl			;DE := size of this block
		ld	d,(hl)
		inc	hl
		ld	a,d
		or	e			;Exit loop if size=0 which
		jr	z,fr_chain_end		; indicates end of chain.
		bit	0,e
		jr	nz,fr_chain_next	;Loop if block is allocated
		ex	de,hl			;If block is free then see if
		sbc	hl,bc			; it is big enough and if not
		jr	nc,fr_chain_fit		; then loop to try next one
;
		add	hl,bc			;Gt this block size back
		ex	de,hl			; into DE.
fr_chain_next:	res	0,e
		add	hl,de			;HL -> next block and loop
		jr	fr_chain_loop		;      to try this one.
;
;
fr_chain_fit:	ex	de,hl
		dec	hl
		dec	hl
		jr	z,init_new_block	;Skip if fit is exact
		dec	de
		dec	de			;Subtract 2 from extra size
		ld	a,d			; to account for new size
		or	e			; entry and skip if it is zero
		jr	z,near_exact_fit	; (zero block not allowed)
;
		ld	(hl),e			;Store the extra size as the
		inc	hl			; size of the remaining
		ld	(hl),d			; free block block.
		inc	hl			;HL -> start of new block
		add	hl,de
		jr	init_new_block		;Jump to zero the block.
;
near_exact_fit:	inc	bc			;If only 2 extra bytes then
		inc	bc			; increase the block size
		jr	init_new_block		; to include them.
;
;
fr_chain_end:	ld	a,.NORAM##		;Anticipate error code
		inc	bc			;Allow space for the block
		inc	bc			; size to be stored.
;
		ld	hl,(RAM_PTR##)		;Get current RAM limit
		or	a			;Work out what new limit
		sbc	hl,bc			; would be after allocation.
		jr	c,not_enuf_ram		;Moan if below zero.
		jp	p,not_enuf_ram		;Also moan if below 8000h.
;
		ld	(RAM_PTR##),hl		;OK so record new limit
		dec	bc
		dec	bc			;Adjust block size back
;
;
init_new_block:	ld	(hl),c			;Store the block size in the
		set	0,(hl)			; first word of the newly
		inc	hl			; allocated block, and set
		ld	(hl),b			; the bottom bit to mark it
		inc	hl			; as allocated.
;
		push	hl
zero_ram_loop:	ld	(hl),0			;Zero the allocated RAM.
		inc	hl
		dec	bc
		ld	a,b
		or	c
		jr	nz,zero_ram_loop	;Loop will exit with A=0
		pop	hl			; which becomes return code.
;
not_enuf_ram:	pop	bc
		pop	de
		or	a			;Set success/fail flag
		ret
;
;
;------------------------------------------------------------------------------
;
	PROC	FR_P2
;
;    This routine frees up a block of RAM in page-2.  It does no checking  for
; valid  memory  block  addresses, but it does check for amalgamating adjacent
; free blocks and for raising "RAM_PTR" whenever possible.  Note that the last
; block in the chain must NEVER bee freed or this routine will not work.  This
; should not matter as the last block is always the fixed RAM area anyway.
;
; Entry:     HL = Address of block to free
; Returns:   None
; Corrupts:  AF,HL
;
		dec	hl			;Mark the memory block as
		dec	hl			; free now.
		res	0,(hl)
;
		push	de
		push	bc
		ld	hl,(RAM_PTR##)		;Start at beginning of
ram_ptr_loop:	ld	c,(hl)			; memory block chain and
		bit	0,c			; walk through it util we
		jr	nz,first_alloc_blk	; find the first block which
		inc	hl			; is allocated.
		ld	b,(hl)
		inc	hl
		add	hl,bc
		jr	ram_ptr_loop
;
first_alloc_blk:ld	(RAM_PTR##),hl		;Record new start address
;
chk_blk_loop:	ld	e,(hl)
		inc	hl			;Get size of next block in
		ld	d,(hl)			; the chain.
		inc	hl
		ld	a,d
		or	e			;Exit if end of chain.
		jr	z,free_p2_ret
		bit	0,e			;Don't try to join together
		jr	nz,chk_next_blk		; if block is allocated.
;
join_blk_loop:	push	hl			;Record start address of block
		add	hl,de
		ld	c,(hl)			;Point to next block and get
		inc	hl			; its size into BC.
		ld	b,(hl)
		pop	hl			;Restore main block pointer
		bit	0,c
		jr	nz,not_free_blk		;Jump if new block is not free
		inc	bc			;New block is free so add its
		inc	bc			; size onto the size of the
		ex	de,hl			; main block in DE, and add
		add	hl,bc			; 2 extra bytes for size word.
		ex	de,hl
		jr	join_blk_loop		;Loop for next block.
;
not_free_blk:	dec	hl			;Record new size of the main
		ld	(hl),d			; block at its start.
		dec	hl
		ld	(hl),e
		inc	hl
		inc	hl
;
chk_next_blk:	res	0,e			;Add size of this block to
		add	hl,de			; get pointer to next one
		jr	chk_blk_loop		; and loop back.
;
;
free_p2_ret:	pop	bc
		pop	de
		ret
;
;
;******************************************************************************
;
KBDOS:
;
;   This is the main KBDOS function entry code. It is never called directly by
; the  user  and so it is rather fussy about the environment when it is called
; because it is designed to be as  quick  as  possible.   All  FCBs,  pathname
; strings  and so on must be paged in when it is called, which generally means
; copying them to page-3 RAM.  The  slot  selection  and  paging  must  be  as
; follows when it is entered:
;
;		Page-0 - RAM slot - Kernel code segment (this code)
;		Page-1 - Don't care
;		Page-2 - RAM slot - Kernel data segment
;		Page-3 - RAM slot - system page-3 segment
;
;    All BDOS functions implemented here return an error code in register A.
; The CP/M compatible functions return their result in HL, with regsiter B
; undefined.  It is the job of MSX-DOS.SYS which calls this routine, to
; detect the CP/M compatible functions and set A=L and B=H.
;
; Entry:    A,BC,DE,HL,IX = Parameters for function
; Returns:  A,BC,DE,HL,IX = Results from function
; Corrupts: AF,BC,DE,HL,IX,IY,AF',BC',DE',HL'
;
		ei
		call	H_BDOS##		;Call a hook just for fun
;
		call	KBDOS_CALL		;Call BDOS function dispatcher
;
		ld	(LAST_ERR##),a		;Record the error code.
		ret
;
;
KBDOS_CALL:	push	hl			;Remember HL in case it is
		push	bc			; required, and save BC
		ex	af,af'
;
		ld	a,(CH_COUNT##)		;If character buffer needs
		dec	a			; flushing then flush it.
		pcall	z,CH_FLUSH
;
		ld	a,c
		cp	_DOSVER##			;Treat DOSVER as a special case (must preserve IY or not depending on input)
		jr	z,KBDOS_DOSVER
		cp	num_kbdos_fns		;If function code is too big
		jr	c,kbdos_fn_ok		; then turn it into an illegal
		ld	c,1Ch			; function number.
kbdos_fn_ok:	ex	af,af'
;
		ld	b,0			;BC := function code
		ld	hl,kbdos_table
		add	hl,bc
		add	hl,bc			;Index into function address
		ld	c,(hl)			; table and get address into
		inc	hl			; HL.
		ld	h,(hl)
		ld	l,c

; Now check if the function adrress is in the range 0000-3FFF.
; If so, the function is in the RAM segment, so do a direct call.
; Otherwise, the funcion is in bank 4 of kernel ROM, so do an interslot call.
;
; Note that the value of A for the function is passed in C.

		ex	af,af'
		ld	a,h
		and	0C0h
		jr	z,no_bank1

		ex	af,af'
		ld	(BK4_ADD##),hl

		pop	bc	;Restore original BC and HL
		pop	hl
		ld	c,a	
		ld	ix,?C4PBK##
		ld	iy,(MASTER_SLOT##-1)
		jp	CALSLT##

no_bank1:	ex	af,af'
		ld	iy,RAM_BASE##		;Setup RAM addressability
		pop	bc
;
		ex	(sp),hl			;Call the BDOS function with
		ret				; HL intact.

KBDOS_DOSVER:
		ex	af,af'
		pop	bc
		pop	hl
		jp	?F_DOSVER##-OFFSET

;
;	----------------------------------------
;
;	Unimplemented function calls come here.
;
f_invalid::	ld	a,.IBDOS##		;Illegal functions return
		ld	hl,0			; error and HL=0 for CP/M
		ret				; return.
;
;	----------------------------------------
;
; Note that routines without "-OFFSET" are executed in bank 4 in kernel ROM

kbdos_table:
	dw	?F_TE0##   -OFFSET	;Terminate program
	dw	?F_CNIN##  -OFFSET	;Console input
	dw	?F_CNOUT## -OFFSET	;Console output
	dw	?F_AXIN##  -OFFSET	;Auxilliary input
	dw	?F_AXOUT## -OFFSET	;Auxilliary output
	dw	?F_LSTOUT##-OFFSET	;List output
	dw	?F_DIO##   -OFFSET	;Direct console I/O
	dw	?F_DIN##   -OFFSET	;Direct console input, no echo
	dw	?F_INNOE## -OFFSET	;Console input, no echo
	dw	?F_STROUT##-OFFSET	;String output
	dw	?F_BFIN##  -OFFSET	;Buffered line input
	dw	?F_CNST##  -OFFSET	;Console status
;
	dw	?F_CPMVER##-OFFSET	;Return CP/M version number
	dw	?F_DSKRST##-OFFSET	;Disk reset
	dw	?F_SELDSK##-OFFSET	;Select disk
;
	dw	F_FOPEN## 		;Open file (FCB)
	dw	F_FCLOSE##		;Close file (FCB)
	dw	F_SFIRST##		;Search for first (FCB)
	dw	F_SNEXT## 		;Search for next (FCB)
	dw	F_FDEL##		;Delete file (FCB)
	dw	F_RDSEQ##		;Read sequential (FCB)
	dw	F_WRSEQ##		;Write sequential (FCB)
	dw	F_FMAKE##		;Create file (FCB)
	dw	F_FREN##		;Rename file (FCB)
;
	dw	?F_LOGIN## -OFFSET	;Get login vector
	dw	?F_CURDRV##-OFFSET	;Get current drive
	dw	?F_DTA##   -OFFSET	;Set disk transfer address
	dw	?F_ALLOC## -OFFSET	;Get allocation information
;
	dw	f_invalid		;Function 1Ch
	dw	f_invalid		;Function 1Dh
	dw	f_invalid		;Function 1Eh
	dw	f_invalid		;Function 1Fh
	dw	f_invalid		;Function 20h
;
	dw	F_RDRND##		;Read random (FCB)
	dw	F_WRRND##		;Write random (FCB)
	dw	F_FSIZE##		;Get file size (FCB)
	dw	F_SETRND##		;Set random record (FCB)
	dw	f_invalid		;Function 25h
	dw	F_WRBLK## 		;Write random block (FCB)
	dw	F_RDBLK##		;Read random block (FCB)
	dw	F_WRZER## 		;Write random with zero fill (FCB)
	dw	f_invalid		;Function 29h
;
	dw	F_GDATE## 	;Get date
	dw	F_SDATE## 	;Set date
	dw	F_GTIME## 	;Get time
	dw	F_STIME## 	;Set time
	dw	?F_VERIFY## -OFFSET	;Set/reset verify flag
;
	dw	?F_RDABS## -OFFSET	;Absolute sector read
	dw	?F_WRABS## -OFFSET	;Absolute sector write
	dw	?F_DPARM## -OFFSET	;Get disk parameters
;
	dw	f_invalid		;Function 32h
	dw	f_invalid		;Function 33h
	dw	f_invalid		;Function 34h
	dw	f_invalid		;Function 35h
	dw	f_invalid		;Function 36h
	dw	f_invalid		;Function 37h
	dw	f_invalid		;Function 38h
	dw	f_invalid		;Function 39h
	dw	f_invalid		;Function 3Ah
	dw	f_invalid		;Function 3Bh
	dw	f_invalid		;Function 3Ch
	dw	f_invalid		;Function 3Dh
	dw	f_invalid		;Function 3Eh
	dw	f_invalid		;Function 3Fh
;
	dw	?F_FFIRST##-OFFSET	;Find first entry
	dw	?F_FNXT##  -OFFSET	;Find next entry
	dw	?F_FNEW##  -OFFSET	;Find new entry
;
	dw	?F_OPEN##  -OFFSET	;Open file handle
	dw	?F_CREATE##-OFFSET	;Create file and open handle
	dw	?F_CLOSE## -OFFSET	;Close file handle
	dw	?F_ENSURE##-OFFSET	;Ensure file handle
	dw	?F_DUP##   -OFFSET	;Duplicate file handle
	dw	?F_READ##  -OFFSET	;Read from file handle
	dw	?F_WRITE## -OFFSET	;Write to file handle
	dw	?F_SEEK##  -OFFSET	;Seek (position file pointer)
	dw	?F_IOCTL## -OFFSET	;I/O control for devices
	dw	?F_HTEST## -OFFSET	;Test file handle
;
	dw	?F_DELETE##-OFFSET	;Delete file or subdirectory
	dw	?F_RENAME##-OFFSET	;Rename file or subdirectory
	dw	?F_MOVE##  -OFFSET	;Move file or subdirectory
	dw	?F_ATTR##  -OFFSET	;Change file or subdirectory attributes
	dw	?F_FTIME## -OFFSET	;Get/set file date and time
;
	dw	?F_HDELET##-OFFSET	;Delete file handle
	dw	?F_HRENAM##-OFFSET	;Rename file handle
	dw	?F_HMOVE## -OFFSET	;Move file handle
	dw	?F_HATTR## -OFFSET	;Change file handle attributes
	dw	?F_HFTIME##-OFFSET	;Get/set file handle date and time
;
	dw	?F_GDTA##  -OFFSET	;Get disk transfer address
	dw	?F_GVFY##  -OFFSET	;Get verify flag setting
	dw	?F_GCD##   -OFFSET	;Get current directory
	dw	?F_CHDIR## -OFFSET	;Change directory
	dw	?F_PARSE## -OFFSET	;Parse pathname
	dw	?F_PFILE## -OFFSET	;Parse filename
	dw	?F_CHKCHR##-OFFSET	;Check character
	dw	?F_WPATH## -OFFSET	;Get whole path string
	dw	?F_FLUSH## -OFFSET	;Flush disk buffers
;
	dw	?F_FORK##  -OFFSET	;Fork a child process
	dw	?F_JOIN##  -OFFSET	;Rejoin parent process
	dw	?F_TERM##  -OFFSET	;Terminate with error code
	dw	f_invalid		; 61h (define abort routine)
	dw	f_invalid		; 62h (define error routine)
	dw	?F_ERROR## -OFFSET	;Get previous error code
	dw	?F_EXPLAI##-OFFSET	;Explain error code
;
	dw	?F_FMT##   -OFFSET	;Format a disk
	dw	F_RAMD##			;Create or destroy RAMdisk
	dw	?F_BUFFER##-OFFSET	;Allocate sector buffers
	dw	?F_ASSIGN##-OFFSET	;Logical drive assignment
;
	dw	F_GENV##		;Get environment item
	dw	F_SENV##		;Set environment item
	dw	F_FENV##		;Find environment item
;
	dw	?F_DCHK##  -OFFSET	;Get/set disk check status
	dw	?F_DOSVER##-OFFSET	;Get MSX-DOS version number
	dw	?F_REDIR## -OFFSET	;Get/set redirection state

	dw	F_FOUT##            ;Get/set fast STROUT flag
	dw	?F_ZSTROUT##-OFFSET	;Zero-terminated string output

	dw	?F_RDDRV## -OFFSET	;Absolute drive sector read
	dw	?F_WRDRV## -OFFSET	;Absolute drive sector write

	dw	F_RALLOC##		;Get/set reduced allocation information mode vector
	dw	F_DSPACE##		;Get disk space information

	dw	F_LOCK##			;Lock/unlock drive

	dw	F_GDRVR##		;Get information about device driver
	dw	F_GDLI##		;Get information about drive letter
	dw	F_GPART##		;Get information about disk partition
	dw	F_CDRVR##       	;Execute a routine in a disk driver
	dw	F_MAPDRV##		;Map a drive letter to a drive or device/LUN/partition

	dw	F_Z80MODE##		;Enable or disable the Z80 access mode for a driver
    dw  F_GETCLUS##     ;Get information about a cluster in a FAT drive
;
;
num_kbdos_fns	equ	($-kbdos_table)/2
;
;
;------------------------------------------------------------------------------
;
	finish	<KINIT>
	end
