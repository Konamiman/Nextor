	.z80
	TITLE	MSX-DOS 2 KERNEL   Copyright (1986)  IS Systems Ltd.
	SUBTTL	Error handling
;******************************************************************************
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
	RAMMOD
;
;------------------------------------------------------------------------------
;
	PROC	NC_DISK_ERR
		or	a		;Clear carry => don't allow ignore
		jr	DISK_ERR
;
	PROC	C_DISK_ERR
		scf			;Set carry => don't allow ignore
;
	PROC	DISK_ERR
if 0
		or	a
		ld	a,1
		ret
else
;
;    This routine is called when an error  has  been  received  from  a  unit
; handler  or  generated within MSX-DOS. If the media check timeout (UD_TIME)
; is non-zero then it will be set to one to ensure that the  next  access  to
; this  unit  (such  as  a  retry) will do a BUILD UPB call.  If the error is
; ".NOUPB" then this will automatically be retried without asking the user.
;
;    While the user's routine is called, the standard I/O  redirection  flags
; ("IO_RDR")  are  temporarily cleared, and restored afterwards. This ensures
; that disk errors always go to the console.
;
; Entry:         A = Error code
;	     Carry = Set if IGNORE not allowed (if entered at DISK_ERR only)
;		HL = Address of unit descriptor
;	      B:DE = Sector on which error occurred (-1 if invalid) :FAT16
; Returns:    Z-flag   set (and A=0) => RETRY
;		     clear (and A=1) => IGNORE
;		      (ABORT will not return)
; Preserves:  BC,DE,HL,IX,AF',BC',DE',HL'
; Corrupts:   AF
;
; Assumes:     UD_TIME=UD_PHYS+1
;
;
		push	bc
		push	de
		push	hl
		exx
		push	hl			;Must save all registers
		push	de
		push	bc
		exx
		ex	af,af'
		push	af
		ex	af,af'
		push	ix
;
		push	af
		ld	c,0			;Initialise flags, and set
		jr	nc,ignore_ok		; the ignore flag if ignore
		set	1,c			; is not allowed.
ignore_ok:
		ld	a,(DSK_RW##)
		or	a			;Set the "write error" flag
		jr	z,read_error		; if the error was while
		set	0,c			; writing.
read_error:
		ld	a,b
		ld	(ERR_EX_SECTOR##),a
		and	d
		and	e			;If sector number is not
		inc	a			; 0FFh:0FFFFh then set the sector
		jr	z,sector_invalid	; valid flag.
		set	4,c			;Set extended sector valid flag.
		inc	b			;If sector number is less than
		dec	b			; 10000h then set sector
		jr	nz,sector_invalid	; valid flag.
		set	3,c
sector_invalid:
        push ix
        push hl
        pop ix
        ld b,(ix+UD_PHYS##)
        bit UF_DBD,(ix+UD_DFLAGS##)
        jr nz,err_no_upb
        ld a,(ix+UD_TIME##) ;If UD_TIME is non-zero (UPB is defined) then set it to
        or a                ; one to force a BUILD UPB before next access.
        jr	z,err_no_upb
        ld (ix+UD_TIME##),1
err_no_upb:
        pop ix
;
		pop	af
		cp	.STOP##			;If STOP key pressed then abort
		jr	z,stop_abort		; without further ado.
;
		cp	.NOUPB##		;If error code is .NOUPB then
		jr	z,force_retry		; jump to retry it without
						; asking the user.
;
		cp	.IFAT##			;If it is .IFAT then set the
		jr	nz,not_auto_abort	; flag to suggest an auto-
		set	2,c			; matic abort.
not_auto_abort:
;
		push	af			;Look the error code up in
		ld	hl,OLD_ERR_TAB-1	; a table for translating
old_err_loop:	inc	hl			; to the old MSX-DOS 1.0
		cp	(hl)			; compatible errors.
		inc	hl
		jr	z,got_old_err
		bit	7,(hl)			;Use default error if not
		jr	z,old_err_loop		; found in the table.
got_old_err:	ld	a,(hl)
		add	a,a
		bit	0,c
		jr	z,not_old_write		;If it is a write error then
		inc	a			; set bit zero.
not_old_write:	bit	2,c
		jr	z,not_old_auto		;If it is an auto-abort
		set	7,a			; error then set bit-7.
not_old_auto:	ex	af,af'			;Put old error in A'
		pop	af
;
		ld	h,(iy+@IO_RDR##)	;Save current setting of
		push	hl			; I/O redirection flags
		ld	(iy+@IO_RDR##),0	; and clear them.
		push	af
		push	iy
		ld	hl,(KDSK_VECT##)	;Call the user's routine.
		call	GO_EXIT
		pop	iy
		pop	bc			;B := error code
		pop	hl			;Restore I/O redirection
		ld	(iy+@IO_RDR##),h	; flags.
;
		dec	a
		cp	3			;Check that response is OK
		jr	c,got_response		; and if not, set it to 0
		xor	a			; to force an ABORT.
		jr	got_response
;
force_retry:	ld	a,1
got_response:	pop	ix
		ex	af,af'
		pop	af
		ex	af,af'
		exx
		pop	bc
		pop	de
		pop	hl
		exx
;
		pop	hl
		or	a			;If response was ABORT then
		jr	z,disk_abort		; jump to do the abort.
;
		pop	de
		pop	bc
		dec	a			;Set Z-flag (& A=0) if RETRY
		ret
;
;
disk_abort:	ld	a,.ABORT##		;ABORT - so get error code
stop_abort:	push	af
		push	hl
		ex	(sp),ix
		res	UF_LCK,(ix+UD_FLAGS##)	;Mark drive as unlocked
		ex	(sp),ix
		pop	hl
		pcall	INV_UD			;Invalidate buffers for this
		pop	af			; drive.
;
endif
	PROC	GO_ABORT
		ld	hl,(KAB_VECT##)
	PROC	GO_EXIT
;
; This routine calls various exit routines in user address space.
;
; Entry:  HL = Address of exit routine
;
		push	hl
		ld	hl,PUT_BDOS##
		ex	(sp),hl
		push	hl
		ld	hl,(ERR_EX_SECTOR##)
		ld	h,0
		jp	PUT_USER##
;
;
OLD_ERR_TAB:	db	.WPROT##, 00h		;Table for translating new
		db	.NRDY##,  01h		; error codes into the old
		db	.DATA##,  02h		; style error codes for
		db	.SEEK##,  03h		; MSX-DOS 1.0 compatible

		db	.RNF##,   04h		; disk error handlers.
		db	.WRERR##, 05h
		db	.DISK##,  06h
		db	.DISK##,  07h
		db	.DISK##,  08h
		db	.NDOS##,  09h
		db	.NCOMP##, 0Ah
		db	.UFORM##, 0Bh
		db	.NOUPB##, 0Ch
		db	0,	  86h		;Default error
;
;
;------------------------------------------------------------------------------
;
	finish	<ERR>
	end
;
