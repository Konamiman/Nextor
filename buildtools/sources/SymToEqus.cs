using System;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;

namespace Konamiman.SymToEqus
{
    class Program
    {
        static int Main(string[] args)
        {
            Console.WriteLine("SymToEqus 1.0 - (c) 2008 by Nestor Soriano");

            if(args.Length<2) {
                Console.WriteLine(
@"
Usage: SymToEqus <input file> <output file> [<label filter regular exp>]

This program converts a .SYM file generated by M80 assembler into a
file containing an EQU and a PUBLIC label for each symbol.

The label filter regular expression selects which symbols will be
included, it should explicitly reject spaces and tabs.
Default label filter accepts all symbols, it is: [^ \t]+"
);
                return 0;
            }

            //* Parse parameters

            string inputFile=null;
            try {
                inputFile=File.ReadAllText(args[0]);
            }
            catch(Exception ex) {
                Console.WriteLine("*** Error when reading input file: {0}", ex.Message);
                return 1;
            }

            string labelPattern=@"[^ \t]+";
            if(args.Length>2) {
                labelPattern=args[2];
            }

            Regex regex = null;
            try {
                regex = new Regex(@"(?<value>[0-9A-Fa-f]{4})[ \t](?<label>"+labelPattern+")");
            }
            catch(Exception ex) {
                Console.WriteLine("*** Error when parsing label filter: {0}", ex.Message);
                return 1;
            }

            StringBuilder outputFile=new StringBuilder();

            //* Process input file

            try {
                MatchCollection matches = regex.Matches(inputFile);
                foreach(Match match in matches) {
                    outputFile.AppendFormat("{0} equ {1}h{2}\tpublic {0}{2}", match.Groups["label"].Value, match.Groups["value"].Value, Environment.NewLine);
                }
            }
            catch(Exception ex) {
                Console.WriteLine("*** Error when parsing input file: {0}", ex.Message);
                return 1;
            }

            //* Generate output file

            try {
                File.WriteAllText(args[1], outputFile.ToString());
            }
            catch(Exception ex) {
                Console.WriteLine("*** Error when creating output file: {0}", ex.Message);
                return 1;
            }

            return 0;
        }
    }
}
